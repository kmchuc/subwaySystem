
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Station
 * 
 */
export type Station = {
  id: number
  name: string
}

/**
 * Model Train
 * 
 */
export type Train = {
  id: number
  name: string
}

/**
 * Model TrainLine
 * 
 */
export type TrainLine = {
  id: number
  trainId: number
  fare: number
}

/**
 * Model Card
 * 
 */
export type Card = {
  id: number
  number: string
  amount: number
}

/**
 * Model Ride
 * 
 */
export type Ride = {
  id: number
  cardId: number
  enterStationId: number
  exitStationId: number | null
  stationId: number | null
  fare: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Stations
 * const stations = await prisma.station.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Stations
   * const stations = await prisma.station.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.station`: Exposes CRUD operations for the **Station** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stations
    * const stations = await prisma.station.findMany()
    * ```
    */
  get station(): Prisma.StationDelegate<GlobalReject>;

  /**
   * `prisma.train`: Exposes CRUD operations for the **Train** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trains
    * const trains = await prisma.train.findMany()
    * ```
    */
  get train(): Prisma.TrainDelegate<GlobalReject>;

  /**
   * `prisma.trainLine`: Exposes CRUD operations for the **TrainLine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrainLines
    * const trainLines = await prisma.trainLine.findMany()
    * ```
    */
  get trainLine(): Prisma.TrainLineDelegate<GlobalReject>;

  /**
   * `prisma.card`: Exposes CRUD operations for the **Card** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cards
    * const cards = await prisma.card.findMany()
    * ```
    */
  get card(): Prisma.CardDelegate<GlobalReject>;

  /**
   * `prisma.ride`: Exposes CRUD operations for the **Ride** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rides
    * const rides = await prisma.ride.findMany()
    * ```
    */
  get ride(): Prisma.RideDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.11.0
   * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Station: 'Station',
    Train: 'Train',
    TrainLine: 'TrainLine',
    Card: 'Card',
    Ride: 'Ride'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StationCountOutputType
   */


  export type StationCountOutputType = {
    EnterStation: number
    ExitStation: number
    Ride: number
    TrainLine: number
  }

  export type StationCountOutputTypeSelect = {
    EnterStation?: boolean
    ExitStation?: boolean
    Ride?: boolean
    TrainLine?: boolean
  }

  export type StationCountOutputTypeGetPayload<S extends boolean | null | undefined | StationCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? StationCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (StationCountOutputTypeArgs)
    ? StationCountOutputType 
    : S extends { select: any } & (StationCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof StationCountOutputType ? StationCountOutputType[P] : never
  } 
      : StationCountOutputType




  // Custom InputTypes

  /**
   * StationCountOutputType without action
   */
  export type StationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StationCountOutputType
     */
    select?: StationCountOutputTypeSelect | null
  }



  /**
   * Count Type TrainLineCountOutputType
   */


  export type TrainLineCountOutputType = {
    stations: number
  }

  export type TrainLineCountOutputTypeSelect = {
    stations?: boolean
  }

  export type TrainLineCountOutputTypeGetPayload<S extends boolean | null | undefined | TrainLineCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TrainLineCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TrainLineCountOutputTypeArgs)
    ? TrainLineCountOutputType 
    : S extends { select: any } & (TrainLineCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TrainLineCountOutputType ? TrainLineCountOutputType[P] : never
  } 
      : TrainLineCountOutputType




  // Custom InputTypes

  /**
   * TrainLineCountOutputType without action
   */
  export type TrainLineCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TrainLineCountOutputType
     */
    select?: TrainLineCountOutputTypeSelect | null
  }



  /**
   * Count Type CardCountOutputType
   */


  export type CardCountOutputType = {
    Ride: number
  }

  export type CardCountOutputTypeSelect = {
    Ride?: boolean
  }

  export type CardCountOutputTypeGetPayload<S extends boolean | null | undefined | CardCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CardCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CardCountOutputTypeArgs)
    ? CardCountOutputType 
    : S extends { select: any } & (CardCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CardCountOutputType ? CardCountOutputType[P] : never
  } 
      : CardCountOutputType




  // Custom InputTypes

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CardCountOutputType
     */
    select?: CardCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Station
   */


  export type AggregateStation = {
    _count: StationCountAggregateOutputType | null
    _avg: StationAvgAggregateOutputType | null
    _sum: StationSumAggregateOutputType | null
    _min: StationMinAggregateOutputType | null
    _max: StationMaxAggregateOutputType | null
  }

  export type StationAvgAggregateOutputType = {
    id: number | null
  }

  export type StationSumAggregateOutputType = {
    id: number | null
  }

  export type StationMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type StationMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type StationCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type StationAvgAggregateInputType = {
    id?: true
  }

  export type StationSumAggregateInputType = {
    id?: true
  }

  export type StationMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type StationMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type StationCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type StationAggregateArgs = {
    /**
     * Filter which Station to aggregate.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: Enumerable<StationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stations
    **/
    _count?: true | StationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StationMaxAggregateInputType
  }

  export type GetStationAggregateType<T extends StationAggregateArgs> = {
        [P in keyof T & keyof AggregateStation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStation[P]>
      : GetScalarType<T[P], AggregateStation[P]>
  }




  export type StationGroupByArgs = {
    where?: StationWhereInput
    orderBy?: Enumerable<StationOrderByWithAggregationInput>
    by: StationScalarFieldEnum[]
    having?: StationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StationCountAggregateInputType | true
    _avg?: StationAvgAggregateInputType
    _sum?: StationSumAggregateInputType
    _min?: StationMinAggregateInputType
    _max?: StationMaxAggregateInputType
  }


  export type StationGroupByOutputType = {
    id: number
    name: string
    _count: StationCountAggregateOutputType | null
    _avg: StationAvgAggregateOutputType | null
    _sum: StationSumAggregateOutputType | null
    _min: StationMinAggregateOutputType | null
    _max: StationMaxAggregateOutputType | null
  }

  type GetStationGroupByPayload<T extends StationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<StationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StationGroupByOutputType[P]>
            : GetScalarType<T[P], StationGroupByOutputType[P]>
        }
      >
    >


  export type StationSelect = {
    id?: boolean
    name?: boolean
    EnterStation?: boolean | Station$EnterStationArgs
    ExitStation?: boolean | Station$ExitStationArgs
    Ride?: boolean | Station$RideArgs
    TrainLine?: boolean | Station$TrainLineArgs
    _count?: boolean | StationCountOutputTypeArgs
  }


  export type StationInclude = {
    EnterStation?: boolean | Station$EnterStationArgs
    ExitStation?: boolean | Station$ExitStationArgs
    Ride?: boolean | Station$RideArgs
    TrainLine?: boolean | Station$TrainLineArgs
    _count?: boolean | StationCountOutputTypeArgs
  }

  export type StationGetPayload<S extends boolean | null | undefined | StationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Station :
    S extends undefined ? never :
    S extends { include: any } & (StationArgs | StationFindManyArgs)
    ? Station  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'EnterStation' ? Array < RideGetPayload<S['include'][P]>>  :
        P extends 'ExitStation' ? Array < RideGetPayload<S['include'][P]>>  :
        P extends 'Ride' ? Array < RideGetPayload<S['include'][P]>>  :
        P extends 'TrainLine' ? Array < TrainLineGetPayload<S['include'][P]>>  :
        P extends '_count' ? StationCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (StationArgs | StationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'EnterStation' ? Array < RideGetPayload<S['select'][P]>>  :
        P extends 'ExitStation' ? Array < RideGetPayload<S['select'][P]>>  :
        P extends 'Ride' ? Array < RideGetPayload<S['select'][P]>>  :
        P extends 'TrainLine' ? Array < TrainLineGetPayload<S['select'][P]>>  :
        P extends '_count' ? StationCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Station ? Station[P] : never
  } 
      : Station


  type StationCountArgs = 
    Omit<StationFindManyArgs, 'select' | 'include'> & {
      select?: StationCountAggregateInputType | true
    }

  export interface StationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Station that matches the filter.
     * @param {StationFindUniqueArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Station'> extends True ? Prisma__StationClient<StationGetPayload<T>> : Prisma__StationClient<StationGetPayload<T> | null, null>

    /**
     * Find one Station that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StationFindUniqueOrThrowArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, StationFindUniqueOrThrowArgs>
    ): Prisma__StationClient<StationGetPayload<T>>

    /**
     * Find the first Station that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationFindFirstArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Station'> extends True ? Prisma__StationClient<StationGetPayload<T>> : Prisma__StationClient<StationGetPayload<T> | null, null>

    /**
     * Find the first Station that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationFindFirstOrThrowArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, StationFindFirstOrThrowArgs>
    ): Prisma__StationClient<StationGetPayload<T>>

    /**
     * Find zero or more Stations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stations
     * const stations = await prisma.station.findMany()
     * 
     * // Get first 10 Stations
     * const stations = await prisma.station.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stationWithIdOnly = await prisma.station.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StationFindManyArgs>(
      args?: SelectSubset<T, StationFindManyArgs>
    ): Prisma.PrismaPromise<Array<StationGetPayload<T>>>

    /**
     * Create a Station.
     * @param {StationCreateArgs} args - Arguments to create a Station.
     * @example
     * // Create one Station
     * const Station = await prisma.station.create({
     *   data: {
     *     // ... data to create a Station
     *   }
     * })
     * 
    **/
    create<T extends StationCreateArgs>(
      args: SelectSubset<T, StationCreateArgs>
    ): Prisma__StationClient<StationGetPayload<T>>

    /**
     * Create many Stations.
     *     @param {StationCreateManyArgs} args - Arguments to create many Stations.
     *     @example
     *     // Create many Stations
     *     const station = await prisma.station.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StationCreateManyArgs>(
      args?: SelectSubset<T, StationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Station.
     * @param {StationDeleteArgs} args - Arguments to delete one Station.
     * @example
     * // Delete one Station
     * const Station = await prisma.station.delete({
     *   where: {
     *     // ... filter to delete one Station
     *   }
     * })
     * 
    **/
    delete<T extends StationDeleteArgs>(
      args: SelectSubset<T, StationDeleteArgs>
    ): Prisma__StationClient<StationGetPayload<T>>

    /**
     * Update one Station.
     * @param {StationUpdateArgs} args - Arguments to update one Station.
     * @example
     * // Update one Station
     * const station = await prisma.station.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StationUpdateArgs>(
      args: SelectSubset<T, StationUpdateArgs>
    ): Prisma__StationClient<StationGetPayload<T>>

    /**
     * Delete zero or more Stations.
     * @param {StationDeleteManyArgs} args - Arguments to filter Stations to delete.
     * @example
     * // Delete a few Stations
     * const { count } = await prisma.station.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StationDeleteManyArgs>(
      args?: SelectSubset<T, StationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stations
     * const station = await prisma.station.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StationUpdateManyArgs>(
      args: SelectSubset<T, StationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Station.
     * @param {StationUpsertArgs} args - Arguments to update or create a Station.
     * @example
     * // Update or create a Station
     * const station = await prisma.station.upsert({
     *   create: {
     *     // ... data to create a Station
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Station we want to update
     *   }
     * })
    **/
    upsert<T extends StationUpsertArgs>(
      args: SelectSubset<T, StationUpsertArgs>
    ): Prisma__StationClient<StationGetPayload<T>>

    /**
     * Count the number of Stations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationCountArgs} args - Arguments to filter Stations to count.
     * @example
     * // Count the number of Stations
     * const count = await prisma.station.count({
     *   where: {
     *     // ... the filter for the Stations we want to count
     *   }
     * })
    **/
    count<T extends StationCountArgs>(
      args?: Subset<T, StationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Station.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StationAggregateArgs>(args: Subset<T, StationAggregateArgs>): Prisma.PrismaPromise<GetStationAggregateType<T>>

    /**
     * Group by Station.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StationGroupByArgs['orderBy'] }
        : { orderBy?: StationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Station.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    EnterStation<T extends Station$EnterStationArgs= {}>(args?: Subset<T, Station$EnterStationArgs>): Prisma.PrismaPromise<Array<RideGetPayload<T>>| Null>;

    ExitStation<T extends Station$ExitStationArgs= {}>(args?: Subset<T, Station$ExitStationArgs>): Prisma.PrismaPromise<Array<RideGetPayload<T>>| Null>;

    Ride<T extends Station$RideArgs= {}>(args?: Subset<T, Station$RideArgs>): Prisma.PrismaPromise<Array<RideGetPayload<T>>| Null>;

    TrainLine<T extends Station$TrainLineArgs= {}>(args?: Subset<T, Station$TrainLineArgs>): Prisma.PrismaPromise<Array<TrainLineGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Station base type for findUnique actions
   */
  export type StationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationInclude | null
    /**
     * Filter, which Station to fetch.
     */
    where: StationWhereUniqueInput
  }

  /**
   * Station findUnique
   */
  export interface StationFindUniqueArgs extends StationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Station findUniqueOrThrow
   */
  export type StationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationInclude | null
    /**
     * Filter, which Station to fetch.
     */
    where: StationWhereUniqueInput
  }


  /**
   * Station base type for findFirst actions
   */
  export type StationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationInclude | null
    /**
     * Filter, which Station to fetch.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: Enumerable<StationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stations.
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stations.
     */
    distinct?: Enumerable<StationScalarFieldEnum>
  }

  /**
   * Station findFirst
   */
  export interface StationFindFirstArgs extends StationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Station findFirstOrThrow
   */
  export type StationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationInclude | null
    /**
     * Filter, which Station to fetch.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: Enumerable<StationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stations.
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stations.
     */
    distinct?: Enumerable<StationScalarFieldEnum>
  }


  /**
   * Station findMany
   */
  export type StationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationInclude | null
    /**
     * Filter, which Stations to fetch.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: Enumerable<StationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stations.
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    distinct?: Enumerable<StationScalarFieldEnum>
  }


  /**
   * Station create
   */
  export type StationCreateArgs = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationInclude | null
    /**
     * The data needed to create a Station.
     */
    data: XOR<StationCreateInput, StationUncheckedCreateInput>
  }


  /**
   * Station createMany
   */
  export type StationCreateManyArgs = {
    /**
     * The data used to create many Stations.
     */
    data: Enumerable<StationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Station update
   */
  export type StationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationInclude | null
    /**
     * The data needed to update a Station.
     */
    data: XOR<StationUpdateInput, StationUncheckedUpdateInput>
    /**
     * Choose, which Station to update.
     */
    where: StationWhereUniqueInput
  }


  /**
   * Station updateMany
   */
  export type StationUpdateManyArgs = {
    /**
     * The data used to update Stations.
     */
    data: XOR<StationUpdateManyMutationInput, StationUncheckedUpdateManyInput>
    /**
     * Filter which Stations to update
     */
    where?: StationWhereInput
  }


  /**
   * Station upsert
   */
  export type StationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationInclude | null
    /**
     * The filter to search for the Station to update in case it exists.
     */
    where: StationWhereUniqueInput
    /**
     * In case the Station found by the `where` argument doesn't exist, create a new Station with this data.
     */
    create: XOR<StationCreateInput, StationUncheckedCreateInput>
    /**
     * In case the Station was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StationUpdateInput, StationUncheckedUpdateInput>
  }


  /**
   * Station delete
   */
  export type StationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationInclude | null
    /**
     * Filter which Station to delete.
     */
    where: StationWhereUniqueInput
  }


  /**
   * Station deleteMany
   */
  export type StationDeleteManyArgs = {
    /**
     * Filter which Stations to delete
     */
    where?: StationWhereInput
  }


  /**
   * Station.EnterStation
   */
  export type Station$EnterStationArgs = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RideInclude | null
    where?: RideWhereInput
    orderBy?: Enumerable<RideOrderByWithRelationInput>
    cursor?: RideWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RideScalarFieldEnum>
  }


  /**
   * Station.ExitStation
   */
  export type Station$ExitStationArgs = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RideInclude | null
    where?: RideWhereInput
    orderBy?: Enumerable<RideOrderByWithRelationInput>
    cursor?: RideWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RideScalarFieldEnum>
  }


  /**
   * Station.Ride
   */
  export type Station$RideArgs = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RideInclude | null
    where?: RideWhereInput
    orderBy?: Enumerable<RideOrderByWithRelationInput>
    cursor?: RideWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RideScalarFieldEnum>
  }


  /**
   * Station.TrainLine
   */
  export type Station$TrainLineArgs = {
    /**
     * Select specific fields to fetch from the TrainLine
     */
    select?: TrainLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainLineInclude | null
    where?: TrainLineWhereInput
    orderBy?: Enumerable<TrainLineOrderByWithRelationInput>
    cursor?: TrainLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TrainLineScalarFieldEnum>
  }


  /**
   * Station without action
   */
  export type StationArgs = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationInclude | null
  }



  /**
   * Model Train
   */


  export type AggregateTrain = {
    _count: TrainCountAggregateOutputType | null
    _avg: TrainAvgAggregateOutputType | null
    _sum: TrainSumAggregateOutputType | null
    _min: TrainMinAggregateOutputType | null
    _max: TrainMaxAggregateOutputType | null
  }

  export type TrainAvgAggregateOutputType = {
    id: number | null
  }

  export type TrainSumAggregateOutputType = {
    id: number | null
  }

  export type TrainMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TrainMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TrainCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TrainAvgAggregateInputType = {
    id?: true
  }

  export type TrainSumAggregateInputType = {
    id?: true
  }

  export type TrainMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TrainMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TrainCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TrainAggregateArgs = {
    /**
     * Filter which Train to aggregate.
     */
    where?: TrainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trains to fetch.
     */
    orderBy?: Enumerable<TrainOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trains
    **/
    _count?: true | TrainCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrainAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrainSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainMaxAggregateInputType
  }

  export type GetTrainAggregateType<T extends TrainAggregateArgs> = {
        [P in keyof T & keyof AggregateTrain]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrain[P]>
      : GetScalarType<T[P], AggregateTrain[P]>
  }




  export type TrainGroupByArgs = {
    where?: TrainWhereInput
    orderBy?: Enumerable<TrainOrderByWithAggregationInput>
    by: TrainScalarFieldEnum[]
    having?: TrainScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainCountAggregateInputType | true
    _avg?: TrainAvgAggregateInputType
    _sum?: TrainSumAggregateInputType
    _min?: TrainMinAggregateInputType
    _max?: TrainMaxAggregateInputType
  }


  export type TrainGroupByOutputType = {
    id: number
    name: string
    _count: TrainCountAggregateOutputType | null
    _avg: TrainAvgAggregateOutputType | null
    _sum: TrainSumAggregateOutputType | null
    _min: TrainMinAggregateOutputType | null
    _max: TrainMaxAggregateOutputType | null
  }

  type GetTrainGroupByPayload<T extends TrainGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TrainGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainGroupByOutputType[P]>
            : GetScalarType<T[P], TrainGroupByOutputType[P]>
        }
      >
    >


  export type TrainSelect = {
    id?: boolean
    name?: boolean
    trainLine?: boolean | TrainLineArgs
  }


  export type TrainInclude = {
    trainLine?: boolean | TrainLineArgs
  }

  export type TrainGetPayload<S extends boolean | null | undefined | TrainArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Train :
    S extends undefined ? never :
    S extends { include: any } & (TrainArgs | TrainFindManyArgs)
    ? Train  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'trainLine' ? TrainLineGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (TrainArgs | TrainFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'trainLine' ? TrainLineGetPayload<S['select'][P]> | null :  P extends keyof Train ? Train[P] : never
  } 
      : Train


  type TrainCountArgs = 
    Omit<TrainFindManyArgs, 'select' | 'include'> & {
      select?: TrainCountAggregateInputType | true
    }

  export interface TrainDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Train that matches the filter.
     * @param {TrainFindUniqueArgs} args - Arguments to find a Train
     * @example
     * // Get one Train
     * const train = await prisma.train.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TrainFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TrainFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Train'> extends True ? Prisma__TrainClient<TrainGetPayload<T>> : Prisma__TrainClient<TrainGetPayload<T> | null, null>

    /**
     * Find one Train that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TrainFindUniqueOrThrowArgs} args - Arguments to find a Train
     * @example
     * // Get one Train
     * const train = await prisma.train.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TrainFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TrainFindUniqueOrThrowArgs>
    ): Prisma__TrainClient<TrainGetPayload<T>>

    /**
     * Find the first Train that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainFindFirstArgs} args - Arguments to find a Train
     * @example
     * // Get one Train
     * const train = await prisma.train.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TrainFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TrainFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Train'> extends True ? Prisma__TrainClient<TrainGetPayload<T>> : Prisma__TrainClient<TrainGetPayload<T> | null, null>

    /**
     * Find the first Train that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainFindFirstOrThrowArgs} args - Arguments to find a Train
     * @example
     * // Get one Train
     * const train = await prisma.train.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TrainFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TrainFindFirstOrThrowArgs>
    ): Prisma__TrainClient<TrainGetPayload<T>>

    /**
     * Find zero or more Trains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trains
     * const trains = await prisma.train.findMany()
     * 
     * // Get first 10 Trains
     * const trains = await prisma.train.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainWithIdOnly = await prisma.train.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TrainFindManyArgs>(
      args?: SelectSubset<T, TrainFindManyArgs>
    ): Prisma.PrismaPromise<Array<TrainGetPayload<T>>>

    /**
     * Create a Train.
     * @param {TrainCreateArgs} args - Arguments to create a Train.
     * @example
     * // Create one Train
     * const Train = await prisma.train.create({
     *   data: {
     *     // ... data to create a Train
     *   }
     * })
     * 
    **/
    create<T extends TrainCreateArgs>(
      args: SelectSubset<T, TrainCreateArgs>
    ): Prisma__TrainClient<TrainGetPayload<T>>

    /**
     * Create many Trains.
     *     @param {TrainCreateManyArgs} args - Arguments to create many Trains.
     *     @example
     *     // Create many Trains
     *     const train = await prisma.train.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TrainCreateManyArgs>(
      args?: SelectSubset<T, TrainCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Train.
     * @param {TrainDeleteArgs} args - Arguments to delete one Train.
     * @example
     * // Delete one Train
     * const Train = await prisma.train.delete({
     *   where: {
     *     // ... filter to delete one Train
     *   }
     * })
     * 
    **/
    delete<T extends TrainDeleteArgs>(
      args: SelectSubset<T, TrainDeleteArgs>
    ): Prisma__TrainClient<TrainGetPayload<T>>

    /**
     * Update one Train.
     * @param {TrainUpdateArgs} args - Arguments to update one Train.
     * @example
     * // Update one Train
     * const train = await prisma.train.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TrainUpdateArgs>(
      args: SelectSubset<T, TrainUpdateArgs>
    ): Prisma__TrainClient<TrainGetPayload<T>>

    /**
     * Delete zero or more Trains.
     * @param {TrainDeleteManyArgs} args - Arguments to filter Trains to delete.
     * @example
     * // Delete a few Trains
     * const { count } = await prisma.train.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TrainDeleteManyArgs>(
      args?: SelectSubset<T, TrainDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trains
     * const train = await prisma.train.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TrainUpdateManyArgs>(
      args: SelectSubset<T, TrainUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Train.
     * @param {TrainUpsertArgs} args - Arguments to update or create a Train.
     * @example
     * // Update or create a Train
     * const train = await prisma.train.upsert({
     *   create: {
     *     // ... data to create a Train
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Train we want to update
     *   }
     * })
    **/
    upsert<T extends TrainUpsertArgs>(
      args: SelectSubset<T, TrainUpsertArgs>
    ): Prisma__TrainClient<TrainGetPayload<T>>

    /**
     * Count the number of Trains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainCountArgs} args - Arguments to filter Trains to count.
     * @example
     * // Count the number of Trains
     * const count = await prisma.train.count({
     *   where: {
     *     // ... the filter for the Trains we want to count
     *   }
     * })
    **/
    count<T extends TrainCountArgs>(
      args?: Subset<T, TrainCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Train.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainAggregateArgs>(args: Subset<T, TrainAggregateArgs>): Prisma.PrismaPromise<GetTrainAggregateType<T>>

    /**
     * Group by Train.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainGroupByArgs['orderBy'] }
        : { orderBy?: TrainGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Train.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TrainClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    trainLine<T extends TrainLineArgs= {}>(args?: Subset<T, TrainLineArgs>): Prisma__TrainLineClient<TrainLineGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Train base type for findUnique actions
   */
  export type TrainFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Train
     */
    select?: TrainSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainInclude | null
    /**
     * Filter, which Train to fetch.
     */
    where: TrainWhereUniqueInput
  }

  /**
   * Train findUnique
   */
  export interface TrainFindUniqueArgs extends TrainFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Train findUniqueOrThrow
   */
  export type TrainFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Train
     */
    select?: TrainSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainInclude | null
    /**
     * Filter, which Train to fetch.
     */
    where: TrainWhereUniqueInput
  }


  /**
   * Train base type for findFirst actions
   */
  export type TrainFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Train
     */
    select?: TrainSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainInclude | null
    /**
     * Filter, which Train to fetch.
     */
    where?: TrainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trains to fetch.
     */
    orderBy?: Enumerable<TrainOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trains.
     */
    cursor?: TrainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trains.
     */
    distinct?: Enumerable<TrainScalarFieldEnum>
  }

  /**
   * Train findFirst
   */
  export interface TrainFindFirstArgs extends TrainFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Train findFirstOrThrow
   */
  export type TrainFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Train
     */
    select?: TrainSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainInclude | null
    /**
     * Filter, which Train to fetch.
     */
    where?: TrainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trains to fetch.
     */
    orderBy?: Enumerable<TrainOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trains.
     */
    cursor?: TrainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trains.
     */
    distinct?: Enumerable<TrainScalarFieldEnum>
  }


  /**
   * Train findMany
   */
  export type TrainFindManyArgs = {
    /**
     * Select specific fields to fetch from the Train
     */
    select?: TrainSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainInclude | null
    /**
     * Filter, which Trains to fetch.
     */
    where?: TrainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trains to fetch.
     */
    orderBy?: Enumerable<TrainOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trains.
     */
    cursor?: TrainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trains.
     */
    skip?: number
    distinct?: Enumerable<TrainScalarFieldEnum>
  }


  /**
   * Train create
   */
  export type TrainCreateArgs = {
    /**
     * Select specific fields to fetch from the Train
     */
    select?: TrainSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainInclude | null
    /**
     * The data needed to create a Train.
     */
    data: XOR<TrainCreateInput, TrainUncheckedCreateInput>
  }


  /**
   * Train createMany
   */
  export type TrainCreateManyArgs = {
    /**
     * The data used to create many Trains.
     */
    data: Enumerable<TrainCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Train update
   */
  export type TrainUpdateArgs = {
    /**
     * Select specific fields to fetch from the Train
     */
    select?: TrainSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainInclude | null
    /**
     * The data needed to update a Train.
     */
    data: XOR<TrainUpdateInput, TrainUncheckedUpdateInput>
    /**
     * Choose, which Train to update.
     */
    where: TrainWhereUniqueInput
  }


  /**
   * Train updateMany
   */
  export type TrainUpdateManyArgs = {
    /**
     * The data used to update Trains.
     */
    data: XOR<TrainUpdateManyMutationInput, TrainUncheckedUpdateManyInput>
    /**
     * Filter which Trains to update
     */
    where?: TrainWhereInput
  }


  /**
   * Train upsert
   */
  export type TrainUpsertArgs = {
    /**
     * Select specific fields to fetch from the Train
     */
    select?: TrainSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainInclude | null
    /**
     * The filter to search for the Train to update in case it exists.
     */
    where: TrainWhereUniqueInput
    /**
     * In case the Train found by the `where` argument doesn't exist, create a new Train with this data.
     */
    create: XOR<TrainCreateInput, TrainUncheckedCreateInput>
    /**
     * In case the Train was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrainUpdateInput, TrainUncheckedUpdateInput>
  }


  /**
   * Train delete
   */
  export type TrainDeleteArgs = {
    /**
     * Select specific fields to fetch from the Train
     */
    select?: TrainSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainInclude | null
    /**
     * Filter which Train to delete.
     */
    where: TrainWhereUniqueInput
  }


  /**
   * Train deleteMany
   */
  export type TrainDeleteManyArgs = {
    /**
     * Filter which Trains to delete
     */
    where?: TrainWhereInput
  }


  /**
   * Train without action
   */
  export type TrainArgs = {
    /**
     * Select specific fields to fetch from the Train
     */
    select?: TrainSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainInclude | null
  }



  /**
   * Model TrainLine
   */


  export type AggregateTrainLine = {
    _count: TrainLineCountAggregateOutputType | null
    _avg: TrainLineAvgAggregateOutputType | null
    _sum: TrainLineSumAggregateOutputType | null
    _min: TrainLineMinAggregateOutputType | null
    _max: TrainLineMaxAggregateOutputType | null
  }

  export type TrainLineAvgAggregateOutputType = {
    id: number | null
    trainId: number | null
    fare: number | null
  }

  export type TrainLineSumAggregateOutputType = {
    id: number | null
    trainId: number | null
    fare: number | null
  }

  export type TrainLineMinAggregateOutputType = {
    id: number | null
    trainId: number | null
    fare: number | null
  }

  export type TrainLineMaxAggregateOutputType = {
    id: number | null
    trainId: number | null
    fare: number | null
  }

  export type TrainLineCountAggregateOutputType = {
    id: number
    trainId: number
    fare: number
    _all: number
  }


  export type TrainLineAvgAggregateInputType = {
    id?: true
    trainId?: true
    fare?: true
  }

  export type TrainLineSumAggregateInputType = {
    id?: true
    trainId?: true
    fare?: true
  }

  export type TrainLineMinAggregateInputType = {
    id?: true
    trainId?: true
    fare?: true
  }

  export type TrainLineMaxAggregateInputType = {
    id?: true
    trainId?: true
    fare?: true
  }

  export type TrainLineCountAggregateInputType = {
    id?: true
    trainId?: true
    fare?: true
    _all?: true
  }

  export type TrainLineAggregateArgs = {
    /**
     * Filter which TrainLine to aggregate.
     */
    where?: TrainLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainLines to fetch.
     */
    orderBy?: Enumerable<TrainLineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrainLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrainLines
    **/
    _count?: true | TrainLineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrainLineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrainLineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainLineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainLineMaxAggregateInputType
  }

  export type GetTrainLineAggregateType<T extends TrainLineAggregateArgs> = {
        [P in keyof T & keyof AggregateTrainLine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrainLine[P]>
      : GetScalarType<T[P], AggregateTrainLine[P]>
  }




  export type TrainLineGroupByArgs = {
    where?: TrainLineWhereInput
    orderBy?: Enumerable<TrainLineOrderByWithAggregationInput>
    by: TrainLineScalarFieldEnum[]
    having?: TrainLineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainLineCountAggregateInputType | true
    _avg?: TrainLineAvgAggregateInputType
    _sum?: TrainLineSumAggregateInputType
    _min?: TrainLineMinAggregateInputType
    _max?: TrainLineMaxAggregateInputType
  }


  export type TrainLineGroupByOutputType = {
    id: number
    trainId: number
    fare: number
    _count: TrainLineCountAggregateOutputType | null
    _avg: TrainLineAvgAggregateOutputType | null
    _sum: TrainLineSumAggregateOutputType | null
    _min: TrainLineMinAggregateOutputType | null
    _max: TrainLineMaxAggregateOutputType | null
  }

  type GetTrainLineGroupByPayload<T extends TrainLineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TrainLineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainLineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainLineGroupByOutputType[P]>
            : GetScalarType<T[P], TrainLineGroupByOutputType[P]>
        }
      >
    >


  export type TrainLineSelect = {
    id?: boolean
    trainId?: boolean
    fare?: boolean
    train?: boolean | TrainArgs
    stations?: boolean | TrainLine$stationsArgs
    _count?: boolean | TrainLineCountOutputTypeArgs
  }


  export type TrainLineInclude = {
    train?: boolean | TrainArgs
    stations?: boolean | TrainLine$stationsArgs
    _count?: boolean | TrainLineCountOutputTypeArgs
  }

  export type TrainLineGetPayload<S extends boolean | null | undefined | TrainLineArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TrainLine :
    S extends undefined ? never :
    S extends { include: any } & (TrainLineArgs | TrainLineFindManyArgs)
    ? TrainLine  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'train' ? TrainGetPayload<S['include'][P]> :
        P extends 'stations' ? Array < StationGetPayload<S['include'][P]>>  :
        P extends '_count' ? TrainLineCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TrainLineArgs | TrainLineFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'train' ? TrainGetPayload<S['select'][P]> :
        P extends 'stations' ? Array < StationGetPayload<S['select'][P]>>  :
        P extends '_count' ? TrainLineCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TrainLine ? TrainLine[P] : never
  } 
      : TrainLine


  type TrainLineCountArgs = 
    Omit<TrainLineFindManyArgs, 'select' | 'include'> & {
      select?: TrainLineCountAggregateInputType | true
    }

  export interface TrainLineDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TrainLine that matches the filter.
     * @param {TrainLineFindUniqueArgs} args - Arguments to find a TrainLine
     * @example
     * // Get one TrainLine
     * const trainLine = await prisma.trainLine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TrainLineFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TrainLineFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TrainLine'> extends True ? Prisma__TrainLineClient<TrainLineGetPayload<T>> : Prisma__TrainLineClient<TrainLineGetPayload<T> | null, null>

    /**
     * Find one TrainLine that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TrainLineFindUniqueOrThrowArgs} args - Arguments to find a TrainLine
     * @example
     * // Get one TrainLine
     * const trainLine = await prisma.trainLine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TrainLineFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TrainLineFindUniqueOrThrowArgs>
    ): Prisma__TrainLineClient<TrainLineGetPayload<T>>

    /**
     * Find the first TrainLine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainLineFindFirstArgs} args - Arguments to find a TrainLine
     * @example
     * // Get one TrainLine
     * const trainLine = await prisma.trainLine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TrainLineFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TrainLineFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TrainLine'> extends True ? Prisma__TrainLineClient<TrainLineGetPayload<T>> : Prisma__TrainLineClient<TrainLineGetPayload<T> | null, null>

    /**
     * Find the first TrainLine that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainLineFindFirstOrThrowArgs} args - Arguments to find a TrainLine
     * @example
     * // Get one TrainLine
     * const trainLine = await prisma.trainLine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TrainLineFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TrainLineFindFirstOrThrowArgs>
    ): Prisma__TrainLineClient<TrainLineGetPayload<T>>

    /**
     * Find zero or more TrainLines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainLineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrainLines
     * const trainLines = await prisma.trainLine.findMany()
     * 
     * // Get first 10 TrainLines
     * const trainLines = await prisma.trainLine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainLineWithIdOnly = await prisma.trainLine.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TrainLineFindManyArgs>(
      args?: SelectSubset<T, TrainLineFindManyArgs>
    ): Prisma.PrismaPromise<Array<TrainLineGetPayload<T>>>

    /**
     * Create a TrainLine.
     * @param {TrainLineCreateArgs} args - Arguments to create a TrainLine.
     * @example
     * // Create one TrainLine
     * const TrainLine = await prisma.trainLine.create({
     *   data: {
     *     // ... data to create a TrainLine
     *   }
     * })
     * 
    **/
    create<T extends TrainLineCreateArgs>(
      args: SelectSubset<T, TrainLineCreateArgs>
    ): Prisma__TrainLineClient<TrainLineGetPayload<T>>

    /**
     * Create many TrainLines.
     *     @param {TrainLineCreateManyArgs} args - Arguments to create many TrainLines.
     *     @example
     *     // Create many TrainLines
     *     const trainLine = await prisma.trainLine.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TrainLineCreateManyArgs>(
      args?: SelectSubset<T, TrainLineCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TrainLine.
     * @param {TrainLineDeleteArgs} args - Arguments to delete one TrainLine.
     * @example
     * // Delete one TrainLine
     * const TrainLine = await prisma.trainLine.delete({
     *   where: {
     *     // ... filter to delete one TrainLine
     *   }
     * })
     * 
    **/
    delete<T extends TrainLineDeleteArgs>(
      args: SelectSubset<T, TrainLineDeleteArgs>
    ): Prisma__TrainLineClient<TrainLineGetPayload<T>>

    /**
     * Update one TrainLine.
     * @param {TrainLineUpdateArgs} args - Arguments to update one TrainLine.
     * @example
     * // Update one TrainLine
     * const trainLine = await prisma.trainLine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TrainLineUpdateArgs>(
      args: SelectSubset<T, TrainLineUpdateArgs>
    ): Prisma__TrainLineClient<TrainLineGetPayload<T>>

    /**
     * Delete zero or more TrainLines.
     * @param {TrainLineDeleteManyArgs} args - Arguments to filter TrainLines to delete.
     * @example
     * // Delete a few TrainLines
     * const { count } = await prisma.trainLine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TrainLineDeleteManyArgs>(
      args?: SelectSubset<T, TrainLineDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrainLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainLineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrainLines
     * const trainLine = await prisma.trainLine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TrainLineUpdateManyArgs>(
      args: SelectSubset<T, TrainLineUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TrainLine.
     * @param {TrainLineUpsertArgs} args - Arguments to update or create a TrainLine.
     * @example
     * // Update or create a TrainLine
     * const trainLine = await prisma.trainLine.upsert({
     *   create: {
     *     // ... data to create a TrainLine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrainLine we want to update
     *   }
     * })
    **/
    upsert<T extends TrainLineUpsertArgs>(
      args: SelectSubset<T, TrainLineUpsertArgs>
    ): Prisma__TrainLineClient<TrainLineGetPayload<T>>

    /**
     * Count the number of TrainLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainLineCountArgs} args - Arguments to filter TrainLines to count.
     * @example
     * // Count the number of TrainLines
     * const count = await prisma.trainLine.count({
     *   where: {
     *     // ... the filter for the TrainLines we want to count
     *   }
     * })
    **/
    count<T extends TrainLineCountArgs>(
      args?: Subset<T, TrainLineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainLineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrainLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainLineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainLineAggregateArgs>(args: Subset<T, TrainLineAggregateArgs>): Prisma.PrismaPromise<GetTrainLineAggregateType<T>>

    /**
     * Group by TrainLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainLineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainLineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainLineGroupByArgs['orderBy'] }
        : { orderBy?: TrainLineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainLineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainLineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TrainLine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TrainLineClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    train<T extends TrainArgs= {}>(args?: Subset<T, TrainArgs>): Prisma__TrainClient<TrainGetPayload<T> | Null>;

    stations<T extends TrainLine$stationsArgs= {}>(args?: Subset<T, TrainLine$stationsArgs>): Prisma.PrismaPromise<Array<StationGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TrainLine base type for findUnique actions
   */
  export type TrainLineFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TrainLine
     */
    select?: TrainLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainLineInclude | null
    /**
     * Filter, which TrainLine to fetch.
     */
    where: TrainLineWhereUniqueInput
  }

  /**
   * TrainLine findUnique
   */
  export interface TrainLineFindUniqueArgs extends TrainLineFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TrainLine findUniqueOrThrow
   */
  export type TrainLineFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TrainLine
     */
    select?: TrainLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainLineInclude | null
    /**
     * Filter, which TrainLine to fetch.
     */
    where: TrainLineWhereUniqueInput
  }


  /**
   * TrainLine base type for findFirst actions
   */
  export type TrainLineFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TrainLine
     */
    select?: TrainLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainLineInclude | null
    /**
     * Filter, which TrainLine to fetch.
     */
    where?: TrainLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainLines to fetch.
     */
    orderBy?: Enumerable<TrainLineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainLines.
     */
    cursor?: TrainLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainLines.
     */
    distinct?: Enumerable<TrainLineScalarFieldEnum>
  }

  /**
   * TrainLine findFirst
   */
  export interface TrainLineFindFirstArgs extends TrainLineFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TrainLine findFirstOrThrow
   */
  export type TrainLineFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TrainLine
     */
    select?: TrainLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainLineInclude | null
    /**
     * Filter, which TrainLine to fetch.
     */
    where?: TrainLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainLines to fetch.
     */
    orderBy?: Enumerable<TrainLineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainLines.
     */
    cursor?: TrainLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainLines.
     */
    distinct?: Enumerable<TrainLineScalarFieldEnum>
  }


  /**
   * TrainLine findMany
   */
  export type TrainLineFindManyArgs = {
    /**
     * Select specific fields to fetch from the TrainLine
     */
    select?: TrainLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainLineInclude | null
    /**
     * Filter, which TrainLines to fetch.
     */
    where?: TrainLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainLines to fetch.
     */
    orderBy?: Enumerable<TrainLineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrainLines.
     */
    cursor?: TrainLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainLines.
     */
    skip?: number
    distinct?: Enumerable<TrainLineScalarFieldEnum>
  }


  /**
   * TrainLine create
   */
  export type TrainLineCreateArgs = {
    /**
     * Select specific fields to fetch from the TrainLine
     */
    select?: TrainLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainLineInclude | null
    /**
     * The data needed to create a TrainLine.
     */
    data: XOR<TrainLineCreateInput, TrainLineUncheckedCreateInput>
  }


  /**
   * TrainLine createMany
   */
  export type TrainLineCreateManyArgs = {
    /**
     * The data used to create many TrainLines.
     */
    data: Enumerable<TrainLineCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TrainLine update
   */
  export type TrainLineUpdateArgs = {
    /**
     * Select specific fields to fetch from the TrainLine
     */
    select?: TrainLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainLineInclude | null
    /**
     * The data needed to update a TrainLine.
     */
    data: XOR<TrainLineUpdateInput, TrainLineUncheckedUpdateInput>
    /**
     * Choose, which TrainLine to update.
     */
    where: TrainLineWhereUniqueInput
  }


  /**
   * TrainLine updateMany
   */
  export type TrainLineUpdateManyArgs = {
    /**
     * The data used to update TrainLines.
     */
    data: XOR<TrainLineUpdateManyMutationInput, TrainLineUncheckedUpdateManyInput>
    /**
     * Filter which TrainLines to update
     */
    where?: TrainLineWhereInput
  }


  /**
   * TrainLine upsert
   */
  export type TrainLineUpsertArgs = {
    /**
     * Select specific fields to fetch from the TrainLine
     */
    select?: TrainLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainLineInclude | null
    /**
     * The filter to search for the TrainLine to update in case it exists.
     */
    where: TrainLineWhereUniqueInput
    /**
     * In case the TrainLine found by the `where` argument doesn't exist, create a new TrainLine with this data.
     */
    create: XOR<TrainLineCreateInput, TrainLineUncheckedCreateInput>
    /**
     * In case the TrainLine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrainLineUpdateInput, TrainLineUncheckedUpdateInput>
  }


  /**
   * TrainLine delete
   */
  export type TrainLineDeleteArgs = {
    /**
     * Select specific fields to fetch from the TrainLine
     */
    select?: TrainLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainLineInclude | null
    /**
     * Filter which TrainLine to delete.
     */
    where: TrainLineWhereUniqueInput
  }


  /**
   * TrainLine deleteMany
   */
  export type TrainLineDeleteManyArgs = {
    /**
     * Filter which TrainLines to delete
     */
    where?: TrainLineWhereInput
  }


  /**
   * TrainLine.stations
   */
  export type TrainLine$stationsArgs = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationInclude | null
    where?: StationWhereInput
    orderBy?: Enumerable<StationOrderByWithRelationInput>
    cursor?: StationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<StationScalarFieldEnum>
  }


  /**
   * TrainLine without action
   */
  export type TrainLineArgs = {
    /**
     * Select specific fields to fetch from the TrainLine
     */
    select?: TrainLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainLineInclude | null
  }



  /**
   * Model Card
   */


  export type AggregateCard = {
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  export type CardAvgAggregateOutputType = {
    id: number | null
    amount: number | null
  }

  export type CardSumAggregateOutputType = {
    id: number | null
    amount: number | null
  }

  export type CardMinAggregateOutputType = {
    id: number | null
    number: string | null
    amount: number | null
  }

  export type CardMaxAggregateOutputType = {
    id: number | null
    number: string | null
    amount: number | null
  }

  export type CardCountAggregateOutputType = {
    id: number
    number: number
    amount: number
    _all: number
  }


  export type CardAvgAggregateInputType = {
    id?: true
    amount?: true
  }

  export type CardSumAggregateInputType = {
    id?: true
    amount?: true
  }

  export type CardMinAggregateInputType = {
    id?: true
    number?: true
    amount?: true
  }

  export type CardMaxAggregateInputType = {
    id?: true
    number?: true
    amount?: true
  }

  export type CardCountAggregateInputType = {
    id?: true
    number?: true
    amount?: true
    _all?: true
  }

  export type CardAggregateArgs = {
    /**
     * Filter which Card to aggregate.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cards
    **/
    _count?: true | CardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardMaxAggregateInputType
  }

  export type GetCardAggregateType<T extends CardAggregateArgs> = {
        [P in keyof T & keyof AggregateCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCard[P]>
      : GetScalarType<T[P], AggregateCard[P]>
  }




  export type CardGroupByArgs = {
    where?: CardWhereInput
    orderBy?: Enumerable<CardOrderByWithAggregationInput>
    by: CardScalarFieldEnum[]
    having?: CardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardCountAggregateInputType | true
    _avg?: CardAvgAggregateInputType
    _sum?: CardSumAggregateInputType
    _min?: CardMinAggregateInputType
    _max?: CardMaxAggregateInputType
  }


  export type CardGroupByOutputType = {
    id: number
    number: string
    amount: number
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  type GetCardGroupByPayload<T extends CardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardGroupByOutputType[P]>
            : GetScalarType<T[P], CardGroupByOutputType[P]>
        }
      >
    >


  export type CardSelect = {
    id?: boolean
    number?: boolean
    amount?: boolean
    Ride?: boolean | Card$RideArgs
    _count?: boolean | CardCountOutputTypeArgs
  }


  export type CardInclude = {
    Ride?: boolean | Card$RideArgs
    _count?: boolean | CardCountOutputTypeArgs
  }

  export type CardGetPayload<S extends boolean | null | undefined | CardArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Card :
    S extends undefined ? never :
    S extends { include: any } & (CardArgs | CardFindManyArgs)
    ? Card  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Ride' ? Array < RideGetPayload<S['include'][P]>>  :
        P extends '_count' ? CardCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CardArgs | CardFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Ride' ? Array < RideGetPayload<S['select'][P]>>  :
        P extends '_count' ? CardCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Card ? Card[P] : never
  } 
      : Card


  type CardCountArgs = 
    Omit<CardFindManyArgs, 'select' | 'include'> & {
      select?: CardCountAggregateInputType | true
    }

  export interface CardDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Card that matches the filter.
     * @param {CardFindUniqueArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CardFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CardFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Card'> extends True ? Prisma__CardClient<CardGetPayload<T>> : Prisma__CardClient<CardGetPayload<T> | null, null>

    /**
     * Find one Card that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CardFindUniqueOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CardFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CardFindUniqueOrThrowArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Find the first Card that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindFirstArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CardFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CardFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Card'> extends True ? Prisma__CardClient<CardGetPayload<T>> : Prisma__CardClient<CardGetPayload<T> | null, null>

    /**
     * Find the first Card that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindFirstOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CardFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CardFindFirstOrThrowArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Find zero or more Cards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cards
     * const cards = await prisma.card.findMany()
     * 
     * // Get first 10 Cards
     * const cards = await prisma.card.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardWithIdOnly = await prisma.card.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CardFindManyArgs>(
      args?: SelectSubset<T, CardFindManyArgs>
    ): Prisma.PrismaPromise<Array<CardGetPayload<T>>>

    /**
     * Create a Card.
     * @param {CardCreateArgs} args - Arguments to create a Card.
     * @example
     * // Create one Card
     * const Card = await prisma.card.create({
     *   data: {
     *     // ... data to create a Card
     *   }
     * })
     * 
    **/
    create<T extends CardCreateArgs>(
      args: SelectSubset<T, CardCreateArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Create many Cards.
     *     @param {CardCreateManyArgs} args - Arguments to create many Cards.
     *     @example
     *     // Create many Cards
     *     const card = await prisma.card.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CardCreateManyArgs>(
      args?: SelectSubset<T, CardCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Card.
     * @param {CardDeleteArgs} args - Arguments to delete one Card.
     * @example
     * // Delete one Card
     * const Card = await prisma.card.delete({
     *   where: {
     *     // ... filter to delete one Card
     *   }
     * })
     * 
    **/
    delete<T extends CardDeleteArgs>(
      args: SelectSubset<T, CardDeleteArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Update one Card.
     * @param {CardUpdateArgs} args - Arguments to update one Card.
     * @example
     * // Update one Card
     * const card = await prisma.card.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CardUpdateArgs>(
      args: SelectSubset<T, CardUpdateArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Delete zero or more Cards.
     * @param {CardDeleteManyArgs} args - Arguments to filter Cards to delete.
     * @example
     * // Delete a few Cards
     * const { count } = await prisma.card.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CardDeleteManyArgs>(
      args?: SelectSubset<T, CardDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cards
     * const card = await prisma.card.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CardUpdateManyArgs>(
      args: SelectSubset<T, CardUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Card.
     * @param {CardUpsertArgs} args - Arguments to update or create a Card.
     * @example
     * // Update or create a Card
     * const card = await prisma.card.upsert({
     *   create: {
     *     // ... data to create a Card
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Card we want to update
     *   }
     * })
    **/
    upsert<T extends CardUpsertArgs>(
      args: SelectSubset<T, CardUpsertArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Count the number of Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardCountArgs} args - Arguments to filter Cards to count.
     * @example
     * // Count the number of Cards
     * const count = await prisma.card.count({
     *   where: {
     *     // ... the filter for the Cards we want to count
     *   }
     * })
    **/
    count<T extends CardCountArgs>(
      args?: Subset<T, CardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardAggregateArgs>(args: Subset<T, CardAggregateArgs>): Prisma.PrismaPromise<GetCardAggregateType<T>>

    /**
     * Group by Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardGroupByArgs['orderBy'] }
        : { orderBy?: CardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Card.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CardClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Ride<T extends Card$RideArgs= {}>(args?: Subset<T, Card$RideArgs>): Prisma.PrismaPromise<Array<RideGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Card base type for findUnique actions
   */
  export type CardFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Card to fetch.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card findUnique
   */
  export interface CardFindUniqueArgs extends CardFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Card findUniqueOrThrow
   */
  export type CardFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Card to fetch.
     */
    where: CardWhereUniqueInput
  }


  /**
   * Card base type for findFirst actions
   */
  export type CardFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Card to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: Enumerable<CardScalarFieldEnum>
  }

  /**
   * Card findFirst
   */
  export interface CardFindFirstArgs extends CardFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Card findFirstOrThrow
   */
  export type CardFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Card to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: Enumerable<CardScalarFieldEnum>
  }


  /**
   * Card findMany
   */
  export type CardFindManyArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Cards to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    distinct?: Enumerable<CardScalarFieldEnum>
  }


  /**
   * Card create
   */
  export type CardCreateArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * The data needed to create a Card.
     */
    data: XOR<CardCreateInput, CardUncheckedCreateInput>
  }


  /**
   * Card createMany
   */
  export type CardCreateManyArgs = {
    /**
     * The data used to create many Cards.
     */
    data: Enumerable<CardCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Card update
   */
  export type CardUpdateArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * The data needed to update a Card.
     */
    data: XOR<CardUpdateInput, CardUncheckedUpdateInput>
    /**
     * Choose, which Card to update.
     */
    where: CardWhereUniqueInput
  }


  /**
   * Card updateMany
   */
  export type CardUpdateManyArgs = {
    /**
     * The data used to update Cards.
     */
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyInput>
    /**
     * Filter which Cards to update
     */
    where?: CardWhereInput
  }


  /**
   * Card upsert
   */
  export type CardUpsertArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * The filter to search for the Card to update in case it exists.
     */
    where: CardWhereUniqueInput
    /**
     * In case the Card found by the `where` argument doesn't exist, create a new Card with this data.
     */
    create: XOR<CardCreateInput, CardUncheckedCreateInput>
    /**
     * In case the Card was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardUpdateInput, CardUncheckedUpdateInput>
  }


  /**
   * Card delete
   */
  export type CardDeleteArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter which Card to delete.
     */
    where: CardWhereUniqueInput
  }


  /**
   * Card deleteMany
   */
  export type CardDeleteManyArgs = {
    /**
     * Filter which Cards to delete
     */
    where?: CardWhereInput
  }


  /**
   * Card.Ride
   */
  export type Card$RideArgs = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RideInclude | null
    where?: RideWhereInput
    orderBy?: Enumerable<RideOrderByWithRelationInput>
    cursor?: RideWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RideScalarFieldEnum>
  }


  /**
   * Card without action
   */
  export type CardArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
  }



  /**
   * Model Ride
   */


  export type AggregateRide = {
    _count: RideCountAggregateOutputType | null
    _avg: RideAvgAggregateOutputType | null
    _sum: RideSumAggregateOutputType | null
    _min: RideMinAggregateOutputType | null
    _max: RideMaxAggregateOutputType | null
  }

  export type RideAvgAggregateOutputType = {
    id: number | null
    cardId: number | null
    enterStationId: number | null
    exitStationId: number | null
    stationId: number | null
    fare: number | null
  }

  export type RideSumAggregateOutputType = {
    id: number | null
    cardId: number | null
    enterStationId: number | null
    exitStationId: number | null
    stationId: number | null
    fare: number | null
  }

  export type RideMinAggregateOutputType = {
    id: number | null
    cardId: number | null
    enterStationId: number | null
    exitStationId: number | null
    stationId: number | null
    fare: number | null
  }

  export type RideMaxAggregateOutputType = {
    id: number | null
    cardId: number | null
    enterStationId: number | null
    exitStationId: number | null
    stationId: number | null
    fare: number | null
  }

  export type RideCountAggregateOutputType = {
    id: number
    cardId: number
    enterStationId: number
    exitStationId: number
    stationId: number
    fare: number
    _all: number
  }


  export type RideAvgAggregateInputType = {
    id?: true
    cardId?: true
    enterStationId?: true
    exitStationId?: true
    stationId?: true
    fare?: true
  }

  export type RideSumAggregateInputType = {
    id?: true
    cardId?: true
    enterStationId?: true
    exitStationId?: true
    stationId?: true
    fare?: true
  }

  export type RideMinAggregateInputType = {
    id?: true
    cardId?: true
    enterStationId?: true
    exitStationId?: true
    stationId?: true
    fare?: true
  }

  export type RideMaxAggregateInputType = {
    id?: true
    cardId?: true
    enterStationId?: true
    exitStationId?: true
    stationId?: true
    fare?: true
  }

  export type RideCountAggregateInputType = {
    id?: true
    cardId?: true
    enterStationId?: true
    exitStationId?: true
    stationId?: true
    fare?: true
    _all?: true
  }

  export type RideAggregateArgs = {
    /**
     * Filter which Ride to aggregate.
     */
    where?: RideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rides to fetch.
     */
    orderBy?: Enumerable<RideOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rides
    **/
    _count?: true | RideCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RideAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RideSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RideMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RideMaxAggregateInputType
  }

  export type GetRideAggregateType<T extends RideAggregateArgs> = {
        [P in keyof T & keyof AggregateRide]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRide[P]>
      : GetScalarType<T[P], AggregateRide[P]>
  }




  export type RideGroupByArgs = {
    where?: RideWhereInput
    orderBy?: Enumerable<RideOrderByWithAggregationInput>
    by: RideScalarFieldEnum[]
    having?: RideScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RideCountAggregateInputType | true
    _avg?: RideAvgAggregateInputType
    _sum?: RideSumAggregateInputType
    _min?: RideMinAggregateInputType
    _max?: RideMaxAggregateInputType
  }


  export type RideGroupByOutputType = {
    id: number
    cardId: number
    enterStationId: number
    exitStationId: number | null
    stationId: number | null
    fare: number
    _count: RideCountAggregateOutputType | null
    _avg: RideAvgAggregateOutputType | null
    _sum: RideSumAggregateOutputType | null
    _min: RideMinAggregateOutputType | null
    _max: RideMaxAggregateOutputType | null
  }

  type GetRideGroupByPayload<T extends RideGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RideGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RideGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RideGroupByOutputType[P]>
            : GetScalarType<T[P], RideGroupByOutputType[P]>
        }
      >
    >


  export type RideSelect = {
    id?: boolean
    cardId?: boolean
    enterStationId?: boolean
    exitStationId?: boolean
    stationId?: boolean
    fare?: boolean
    card?: boolean | CardArgs
    enterStation?: boolean | StationArgs
    exitStation?: boolean | StationArgs
    Station?: boolean | StationArgs
  }


  export type RideInclude = {
    card?: boolean | CardArgs
    enterStation?: boolean | StationArgs
    exitStation?: boolean | StationArgs
    Station?: boolean | StationArgs
  }

  export type RideGetPayload<S extends boolean | null | undefined | RideArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Ride :
    S extends undefined ? never :
    S extends { include: any } & (RideArgs | RideFindManyArgs)
    ? Ride  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'card' ? CardGetPayload<S['include'][P]> :
        P extends 'enterStation' ? StationGetPayload<S['include'][P]> :
        P extends 'exitStation' ? StationGetPayload<S['include'][P]> | null :
        P extends 'Station' ? StationGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (RideArgs | RideFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'card' ? CardGetPayload<S['select'][P]> :
        P extends 'enterStation' ? StationGetPayload<S['select'][P]> :
        P extends 'exitStation' ? StationGetPayload<S['select'][P]> | null :
        P extends 'Station' ? StationGetPayload<S['select'][P]> | null :  P extends keyof Ride ? Ride[P] : never
  } 
      : Ride


  type RideCountArgs = 
    Omit<RideFindManyArgs, 'select' | 'include'> & {
      select?: RideCountAggregateInputType | true
    }

  export interface RideDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Ride that matches the filter.
     * @param {RideFindUniqueArgs} args - Arguments to find a Ride
     * @example
     * // Get one Ride
     * const ride = await prisma.ride.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RideFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RideFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Ride'> extends True ? Prisma__RideClient<RideGetPayload<T>> : Prisma__RideClient<RideGetPayload<T> | null, null>

    /**
     * Find one Ride that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RideFindUniqueOrThrowArgs} args - Arguments to find a Ride
     * @example
     * // Get one Ride
     * const ride = await prisma.ride.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RideFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RideFindUniqueOrThrowArgs>
    ): Prisma__RideClient<RideGetPayload<T>>

    /**
     * Find the first Ride that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideFindFirstArgs} args - Arguments to find a Ride
     * @example
     * // Get one Ride
     * const ride = await prisma.ride.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RideFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RideFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Ride'> extends True ? Prisma__RideClient<RideGetPayload<T>> : Prisma__RideClient<RideGetPayload<T> | null, null>

    /**
     * Find the first Ride that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideFindFirstOrThrowArgs} args - Arguments to find a Ride
     * @example
     * // Get one Ride
     * const ride = await prisma.ride.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RideFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RideFindFirstOrThrowArgs>
    ): Prisma__RideClient<RideGetPayload<T>>

    /**
     * Find zero or more Rides that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rides
     * const rides = await prisma.ride.findMany()
     * 
     * // Get first 10 Rides
     * const rides = await prisma.ride.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rideWithIdOnly = await prisma.ride.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RideFindManyArgs>(
      args?: SelectSubset<T, RideFindManyArgs>
    ): Prisma.PrismaPromise<Array<RideGetPayload<T>>>

    /**
     * Create a Ride.
     * @param {RideCreateArgs} args - Arguments to create a Ride.
     * @example
     * // Create one Ride
     * const Ride = await prisma.ride.create({
     *   data: {
     *     // ... data to create a Ride
     *   }
     * })
     * 
    **/
    create<T extends RideCreateArgs>(
      args: SelectSubset<T, RideCreateArgs>
    ): Prisma__RideClient<RideGetPayload<T>>

    /**
     * Create many Rides.
     *     @param {RideCreateManyArgs} args - Arguments to create many Rides.
     *     @example
     *     // Create many Rides
     *     const ride = await prisma.ride.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RideCreateManyArgs>(
      args?: SelectSubset<T, RideCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ride.
     * @param {RideDeleteArgs} args - Arguments to delete one Ride.
     * @example
     * // Delete one Ride
     * const Ride = await prisma.ride.delete({
     *   where: {
     *     // ... filter to delete one Ride
     *   }
     * })
     * 
    **/
    delete<T extends RideDeleteArgs>(
      args: SelectSubset<T, RideDeleteArgs>
    ): Prisma__RideClient<RideGetPayload<T>>

    /**
     * Update one Ride.
     * @param {RideUpdateArgs} args - Arguments to update one Ride.
     * @example
     * // Update one Ride
     * const ride = await prisma.ride.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RideUpdateArgs>(
      args: SelectSubset<T, RideUpdateArgs>
    ): Prisma__RideClient<RideGetPayload<T>>

    /**
     * Delete zero or more Rides.
     * @param {RideDeleteManyArgs} args - Arguments to filter Rides to delete.
     * @example
     * // Delete a few Rides
     * const { count } = await prisma.ride.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RideDeleteManyArgs>(
      args?: SelectSubset<T, RideDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rides
     * const ride = await prisma.ride.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RideUpdateManyArgs>(
      args: SelectSubset<T, RideUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ride.
     * @param {RideUpsertArgs} args - Arguments to update or create a Ride.
     * @example
     * // Update or create a Ride
     * const ride = await prisma.ride.upsert({
     *   create: {
     *     // ... data to create a Ride
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ride we want to update
     *   }
     * })
    **/
    upsert<T extends RideUpsertArgs>(
      args: SelectSubset<T, RideUpsertArgs>
    ): Prisma__RideClient<RideGetPayload<T>>

    /**
     * Count the number of Rides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideCountArgs} args - Arguments to filter Rides to count.
     * @example
     * // Count the number of Rides
     * const count = await prisma.ride.count({
     *   where: {
     *     // ... the filter for the Rides we want to count
     *   }
     * })
    **/
    count<T extends RideCountArgs>(
      args?: Subset<T, RideCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RideCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ride.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RideAggregateArgs>(args: Subset<T, RideAggregateArgs>): Prisma.PrismaPromise<GetRideAggregateType<T>>

    /**
     * Group by Ride.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RideGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RideGroupByArgs['orderBy'] }
        : { orderBy?: RideGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RideGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRideGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Ride.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RideClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    card<T extends CardArgs= {}>(args?: Subset<T, CardArgs>): Prisma__CardClient<CardGetPayload<T> | Null>;

    enterStation<T extends StationArgs= {}>(args?: Subset<T, StationArgs>): Prisma__StationClient<StationGetPayload<T> | Null>;

    exitStation<T extends StationArgs= {}>(args?: Subset<T, StationArgs>): Prisma__StationClient<StationGetPayload<T> | Null>;

    Station<T extends StationArgs= {}>(args?: Subset<T, StationArgs>): Prisma__StationClient<StationGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Ride base type for findUnique actions
   */
  export type RideFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RideInclude | null
    /**
     * Filter, which Ride to fetch.
     */
    where: RideWhereUniqueInput
  }

  /**
   * Ride findUnique
   */
  export interface RideFindUniqueArgs extends RideFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Ride findUniqueOrThrow
   */
  export type RideFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RideInclude | null
    /**
     * Filter, which Ride to fetch.
     */
    where: RideWhereUniqueInput
  }


  /**
   * Ride base type for findFirst actions
   */
  export type RideFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RideInclude | null
    /**
     * Filter, which Ride to fetch.
     */
    where?: RideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rides to fetch.
     */
    orderBy?: Enumerable<RideOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rides.
     */
    cursor?: RideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rides.
     */
    distinct?: Enumerable<RideScalarFieldEnum>
  }

  /**
   * Ride findFirst
   */
  export interface RideFindFirstArgs extends RideFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Ride findFirstOrThrow
   */
  export type RideFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RideInclude | null
    /**
     * Filter, which Ride to fetch.
     */
    where?: RideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rides to fetch.
     */
    orderBy?: Enumerable<RideOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rides.
     */
    cursor?: RideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rides.
     */
    distinct?: Enumerable<RideScalarFieldEnum>
  }


  /**
   * Ride findMany
   */
  export type RideFindManyArgs = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RideInclude | null
    /**
     * Filter, which Rides to fetch.
     */
    where?: RideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rides to fetch.
     */
    orderBy?: Enumerable<RideOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rides.
     */
    cursor?: RideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rides.
     */
    skip?: number
    distinct?: Enumerable<RideScalarFieldEnum>
  }


  /**
   * Ride create
   */
  export type RideCreateArgs = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RideInclude | null
    /**
     * The data needed to create a Ride.
     */
    data: XOR<RideCreateInput, RideUncheckedCreateInput>
  }


  /**
   * Ride createMany
   */
  export type RideCreateManyArgs = {
    /**
     * The data used to create many Rides.
     */
    data: Enumerable<RideCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Ride update
   */
  export type RideUpdateArgs = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RideInclude | null
    /**
     * The data needed to update a Ride.
     */
    data: XOR<RideUpdateInput, RideUncheckedUpdateInput>
    /**
     * Choose, which Ride to update.
     */
    where: RideWhereUniqueInput
  }


  /**
   * Ride updateMany
   */
  export type RideUpdateManyArgs = {
    /**
     * The data used to update Rides.
     */
    data: XOR<RideUpdateManyMutationInput, RideUncheckedUpdateManyInput>
    /**
     * Filter which Rides to update
     */
    where?: RideWhereInput
  }


  /**
   * Ride upsert
   */
  export type RideUpsertArgs = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RideInclude | null
    /**
     * The filter to search for the Ride to update in case it exists.
     */
    where: RideWhereUniqueInput
    /**
     * In case the Ride found by the `where` argument doesn't exist, create a new Ride with this data.
     */
    create: XOR<RideCreateInput, RideUncheckedCreateInput>
    /**
     * In case the Ride was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RideUpdateInput, RideUncheckedUpdateInput>
  }


  /**
   * Ride delete
   */
  export type RideDeleteArgs = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RideInclude | null
    /**
     * Filter which Ride to delete.
     */
    where: RideWhereUniqueInput
  }


  /**
   * Ride deleteMany
   */
  export type RideDeleteManyArgs = {
    /**
     * Filter which Rides to delete
     */
    where?: RideWhereInput
  }


  /**
   * Ride without action
   */
  export type RideArgs = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RideInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CardScalarFieldEnum: {
    id: 'id',
    number: 'number',
    amount: 'amount'
  };

  export type CardScalarFieldEnum = (typeof CardScalarFieldEnum)[keyof typeof CardScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RideScalarFieldEnum: {
    id: 'id',
    cardId: 'cardId',
    enterStationId: 'enterStationId',
    exitStationId: 'exitStationId',
    stationId: 'stationId',
    fare: 'fare'
  };

  export type RideScalarFieldEnum = (typeof RideScalarFieldEnum)[keyof typeof RideScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StationScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type StationScalarFieldEnum = (typeof StationScalarFieldEnum)[keyof typeof StationScalarFieldEnum]


  export const TrainLineScalarFieldEnum: {
    id: 'id',
    trainId: 'trainId',
    fare: 'fare'
  };

  export type TrainLineScalarFieldEnum = (typeof TrainLineScalarFieldEnum)[keyof typeof TrainLineScalarFieldEnum]


  export const TrainScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TrainScalarFieldEnum = (typeof TrainScalarFieldEnum)[keyof typeof TrainScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type StationWhereInput = {
    AND?: Enumerable<StationWhereInput>
    OR?: Enumerable<StationWhereInput>
    NOT?: Enumerable<StationWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    EnterStation?: RideListRelationFilter
    ExitStation?: RideListRelationFilter
    Ride?: RideListRelationFilter
    TrainLine?: TrainLineListRelationFilter
  }

  export type StationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    EnterStation?: RideOrderByRelationAggregateInput
    ExitStation?: RideOrderByRelationAggregateInput
    Ride?: RideOrderByRelationAggregateInput
    TrainLine?: TrainLineOrderByRelationAggregateInput
  }

  export type StationWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type StationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: StationCountOrderByAggregateInput
    _avg?: StationAvgOrderByAggregateInput
    _max?: StationMaxOrderByAggregateInput
    _min?: StationMinOrderByAggregateInput
    _sum?: StationSumOrderByAggregateInput
  }

  export type StationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StationScalarWhereWithAggregatesInput>
    OR?: Enumerable<StationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type TrainWhereInput = {
    AND?: Enumerable<TrainWhereInput>
    OR?: Enumerable<TrainWhereInput>
    NOT?: Enumerable<TrainWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    trainLine?: XOR<TrainLineRelationFilter, TrainLineWhereInput> | null
  }

  export type TrainOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    trainLine?: TrainLineOrderByWithRelationInput
  }

  export type TrainWhereUniqueInput = {
    id?: number
  }

  export type TrainOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TrainCountOrderByAggregateInput
    _avg?: TrainAvgOrderByAggregateInput
    _max?: TrainMaxOrderByAggregateInput
    _min?: TrainMinOrderByAggregateInput
    _sum?: TrainSumOrderByAggregateInput
  }

  export type TrainScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TrainScalarWhereWithAggregatesInput>
    OR?: Enumerable<TrainScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TrainScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type TrainLineWhereInput = {
    AND?: Enumerable<TrainLineWhereInput>
    OR?: Enumerable<TrainLineWhereInput>
    NOT?: Enumerable<TrainLineWhereInput>
    id?: IntFilter | number
    trainId?: IntFilter | number
    fare?: FloatFilter | number
    train?: XOR<TrainRelationFilter, TrainWhereInput>
    stations?: StationListRelationFilter
  }

  export type TrainLineOrderByWithRelationInput = {
    id?: SortOrder
    trainId?: SortOrder
    fare?: SortOrder
    train?: TrainOrderByWithRelationInput
    stations?: StationOrderByRelationAggregateInput
  }

  export type TrainLineWhereUniqueInput = {
    id?: number
    trainId?: number
  }

  export type TrainLineOrderByWithAggregationInput = {
    id?: SortOrder
    trainId?: SortOrder
    fare?: SortOrder
    _count?: TrainLineCountOrderByAggregateInput
    _avg?: TrainLineAvgOrderByAggregateInput
    _max?: TrainLineMaxOrderByAggregateInput
    _min?: TrainLineMinOrderByAggregateInput
    _sum?: TrainLineSumOrderByAggregateInput
  }

  export type TrainLineScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TrainLineScalarWhereWithAggregatesInput>
    OR?: Enumerable<TrainLineScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TrainLineScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    trainId?: IntWithAggregatesFilter | number
    fare?: FloatWithAggregatesFilter | number
  }

  export type CardWhereInput = {
    AND?: Enumerable<CardWhereInput>
    OR?: Enumerable<CardWhereInput>
    NOT?: Enumerable<CardWhereInput>
    id?: IntFilter | number
    number?: StringFilter | string
    amount?: FloatFilter | number
    Ride?: RideListRelationFilter
  }

  export type CardOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    amount?: SortOrder
    Ride?: RideOrderByRelationAggregateInput
  }

  export type CardWhereUniqueInput = {
    id?: number
    number?: string
  }

  export type CardOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    amount?: SortOrder
    _count?: CardCountOrderByAggregateInput
    _avg?: CardAvgOrderByAggregateInput
    _max?: CardMaxOrderByAggregateInput
    _min?: CardMinOrderByAggregateInput
    _sum?: CardSumOrderByAggregateInput
  }

  export type CardScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CardScalarWhereWithAggregatesInput>
    OR?: Enumerable<CardScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CardScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    number?: StringWithAggregatesFilter | string
    amount?: FloatWithAggregatesFilter | number
  }

  export type RideWhereInput = {
    AND?: Enumerable<RideWhereInput>
    OR?: Enumerable<RideWhereInput>
    NOT?: Enumerable<RideWhereInput>
    id?: IntFilter | number
    cardId?: IntFilter | number
    enterStationId?: IntFilter | number
    exitStationId?: IntNullableFilter | number | null
    stationId?: IntNullableFilter | number | null
    fare?: FloatFilter | number
    card?: XOR<CardRelationFilter, CardWhereInput>
    enterStation?: XOR<StationRelationFilter, StationWhereInput>
    exitStation?: XOR<StationRelationFilter, StationWhereInput> | null
    Station?: XOR<StationRelationFilter, StationWhereInput> | null
  }

  export type RideOrderByWithRelationInput = {
    id?: SortOrder
    cardId?: SortOrder
    enterStationId?: SortOrder
    exitStationId?: SortOrder
    stationId?: SortOrder
    fare?: SortOrder
    card?: CardOrderByWithRelationInput
    enterStation?: StationOrderByWithRelationInput
    exitStation?: StationOrderByWithRelationInput
    Station?: StationOrderByWithRelationInput
  }

  export type RideWhereUniqueInput = {
    id?: number
  }

  export type RideOrderByWithAggregationInput = {
    id?: SortOrder
    cardId?: SortOrder
    enterStationId?: SortOrder
    exitStationId?: SortOrder
    stationId?: SortOrder
    fare?: SortOrder
    _count?: RideCountOrderByAggregateInput
    _avg?: RideAvgOrderByAggregateInput
    _max?: RideMaxOrderByAggregateInput
    _min?: RideMinOrderByAggregateInput
    _sum?: RideSumOrderByAggregateInput
  }

  export type RideScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RideScalarWhereWithAggregatesInput>
    OR?: Enumerable<RideScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RideScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    cardId?: IntWithAggregatesFilter | number
    enterStationId?: IntWithAggregatesFilter | number
    exitStationId?: IntNullableWithAggregatesFilter | number | null
    stationId?: IntNullableWithAggregatesFilter | number | null
    fare?: FloatWithAggregatesFilter | number
  }

  export type StationCreateInput = {
    name: string
    EnterStation?: RideCreateNestedManyWithoutEnterStationInput
    ExitStation?: RideCreateNestedManyWithoutExitStationInput
    Ride?: RideCreateNestedManyWithoutStationInput
    TrainLine?: TrainLineCreateNestedManyWithoutStationsInput
  }

  export type StationUncheckedCreateInput = {
    id?: number
    name: string
    EnterStation?: RideUncheckedCreateNestedManyWithoutEnterStationInput
    ExitStation?: RideUncheckedCreateNestedManyWithoutExitStationInput
    Ride?: RideUncheckedCreateNestedManyWithoutStationInput
    TrainLine?: TrainLineUncheckedCreateNestedManyWithoutStationsInput
  }

  export type StationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    EnterStation?: RideUpdateManyWithoutEnterStationNestedInput
    ExitStation?: RideUpdateManyWithoutExitStationNestedInput
    Ride?: RideUpdateManyWithoutStationNestedInput
    TrainLine?: TrainLineUpdateManyWithoutStationsNestedInput
  }

  export type StationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    EnterStation?: RideUncheckedUpdateManyWithoutEnterStationNestedInput
    ExitStation?: RideUncheckedUpdateManyWithoutExitStationNestedInput
    Ride?: RideUncheckedUpdateManyWithoutStationNestedInput
    TrainLine?: TrainLineUncheckedUpdateManyWithoutStationsNestedInput
  }

  export type StationCreateManyInput = {
    id?: number
    name: string
  }

  export type StationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TrainCreateInput = {
    name: string
    trainLine?: TrainLineCreateNestedOneWithoutTrainInput
  }

  export type TrainUncheckedCreateInput = {
    id?: number
    name: string
    trainLine?: TrainLineUncheckedCreateNestedOneWithoutTrainInput
  }

  export type TrainUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    trainLine?: TrainLineUpdateOneWithoutTrainNestedInput
  }

  export type TrainUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    trainLine?: TrainLineUncheckedUpdateOneWithoutTrainNestedInput
  }

  export type TrainCreateManyInput = {
    id?: number
    name: string
  }

  export type TrainUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TrainUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TrainLineCreateInput = {
    fare?: number
    train: TrainCreateNestedOneWithoutTrainLineInput
    stations?: StationCreateNestedManyWithoutTrainLineInput
  }

  export type TrainLineUncheckedCreateInput = {
    id?: number
    trainId: number
    fare?: number
    stations?: StationUncheckedCreateNestedManyWithoutTrainLineInput
  }

  export type TrainLineUpdateInput = {
    fare?: FloatFieldUpdateOperationsInput | number
    train?: TrainUpdateOneRequiredWithoutTrainLineNestedInput
    stations?: StationUpdateManyWithoutTrainLineNestedInput
  }

  export type TrainLineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainId?: IntFieldUpdateOperationsInput | number
    fare?: FloatFieldUpdateOperationsInput | number
    stations?: StationUncheckedUpdateManyWithoutTrainLineNestedInput
  }

  export type TrainLineCreateManyInput = {
    id?: number
    trainId: number
    fare?: number
  }

  export type TrainLineUpdateManyMutationInput = {
    fare?: FloatFieldUpdateOperationsInput | number
  }

  export type TrainLineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainId?: IntFieldUpdateOperationsInput | number
    fare?: FloatFieldUpdateOperationsInput | number
  }

  export type CardCreateInput = {
    number: string
    amount?: number
    Ride?: RideCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateInput = {
    id?: number
    number: string
    amount?: number
    Ride?: RideUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardUpdateInput = {
    number?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    Ride?: RideUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    Ride?: RideUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardCreateManyInput = {
    id?: number
    number: string
    amount?: number
  }

  export type CardUpdateManyMutationInput = {
    number?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
  }

  export type CardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
  }

  export type RideCreateInput = {
    fare: number
    card: CardCreateNestedOneWithoutRideInput
    enterStation: StationCreateNestedOneWithoutEnterStationInput
    exitStation?: StationCreateNestedOneWithoutExitStationInput
    Station?: StationCreateNestedOneWithoutRideInput
  }

  export type RideUncheckedCreateInput = {
    id?: number
    cardId: number
    enterStationId: number
    exitStationId?: number | null
    stationId?: number | null
    fare: number
  }

  export type RideUpdateInput = {
    fare?: FloatFieldUpdateOperationsInput | number
    card?: CardUpdateOneRequiredWithoutRideNestedInput
    enterStation?: StationUpdateOneRequiredWithoutEnterStationNestedInput
    exitStation?: StationUpdateOneWithoutExitStationNestedInput
    Station?: StationUpdateOneWithoutRideNestedInput
  }

  export type RideUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cardId?: IntFieldUpdateOperationsInput | number
    enterStationId?: IntFieldUpdateOperationsInput | number
    exitStationId?: NullableIntFieldUpdateOperationsInput | number | null
    stationId?: NullableIntFieldUpdateOperationsInput | number | null
    fare?: FloatFieldUpdateOperationsInput | number
  }

  export type RideCreateManyInput = {
    id?: number
    cardId: number
    enterStationId: number
    exitStationId?: number | null
    stationId?: number | null
    fare: number
  }

  export type RideUpdateManyMutationInput = {
    fare?: FloatFieldUpdateOperationsInput | number
  }

  export type RideUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cardId?: IntFieldUpdateOperationsInput | number
    enterStationId?: IntFieldUpdateOperationsInput | number
    exitStationId?: NullableIntFieldUpdateOperationsInput | number | null
    stationId?: NullableIntFieldUpdateOperationsInput | number | null
    fare?: FloatFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type RideListRelationFilter = {
    every?: RideWhereInput
    some?: RideWhereInput
    none?: RideWhereInput
  }

  export type TrainLineListRelationFilter = {
    every?: TrainLineWhereInput
    some?: TrainLineWhereInput
    none?: TrainLineWhereInput
  }

  export type RideOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrainLineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type StationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type StationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type StationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type TrainLineRelationFilter = {
    is?: TrainLineWhereInput | null
    isNot?: TrainLineWhereInput | null
  }

  export type TrainCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TrainAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TrainMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TrainMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TrainSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type TrainRelationFilter = {
    is?: TrainWhereInput
    isNot?: TrainWhereInput
  }

  export type StationListRelationFilter = {
    every?: StationWhereInput
    some?: StationWhereInput
    none?: StationWhereInput
  }

  export type StationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrainLineCountOrderByAggregateInput = {
    id?: SortOrder
    trainId?: SortOrder
    fare?: SortOrder
  }

  export type TrainLineAvgOrderByAggregateInput = {
    id?: SortOrder
    trainId?: SortOrder
    fare?: SortOrder
  }

  export type TrainLineMaxOrderByAggregateInput = {
    id?: SortOrder
    trainId?: SortOrder
    fare?: SortOrder
  }

  export type TrainLineMinOrderByAggregateInput = {
    id?: SortOrder
    trainId?: SortOrder
    fare?: SortOrder
  }

  export type TrainLineSumOrderByAggregateInput = {
    id?: SortOrder
    trainId?: SortOrder
    fare?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type CardCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    amount?: SortOrder
  }

  export type CardAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
  }

  export type CardMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    amount?: SortOrder
  }

  export type CardMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    amount?: SortOrder
  }

  export type CardSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type CardRelationFilter = {
    is?: CardWhereInput
    isNot?: CardWhereInput
  }

  export type StationRelationFilter = {
    is?: StationWhereInput
    isNot?: StationWhereInput
  }

  export type RideCountOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    enterStationId?: SortOrder
    exitStationId?: SortOrder
    stationId?: SortOrder
    fare?: SortOrder
  }

  export type RideAvgOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    enterStationId?: SortOrder
    exitStationId?: SortOrder
    stationId?: SortOrder
    fare?: SortOrder
  }

  export type RideMaxOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    enterStationId?: SortOrder
    exitStationId?: SortOrder
    stationId?: SortOrder
    fare?: SortOrder
  }

  export type RideMinOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    enterStationId?: SortOrder
    exitStationId?: SortOrder
    stationId?: SortOrder
    fare?: SortOrder
  }

  export type RideSumOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    enterStationId?: SortOrder
    exitStationId?: SortOrder
    stationId?: SortOrder
    fare?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type RideCreateNestedManyWithoutEnterStationInput = {
    create?: XOR<Enumerable<RideCreateWithoutEnterStationInput>, Enumerable<RideUncheckedCreateWithoutEnterStationInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutEnterStationInput>
    createMany?: RideCreateManyEnterStationInputEnvelope
    connect?: Enumerable<RideWhereUniqueInput>
  }

  export type RideCreateNestedManyWithoutExitStationInput = {
    create?: XOR<Enumerable<RideCreateWithoutExitStationInput>, Enumerable<RideUncheckedCreateWithoutExitStationInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutExitStationInput>
    createMany?: RideCreateManyExitStationInputEnvelope
    connect?: Enumerable<RideWhereUniqueInput>
  }

  export type RideCreateNestedManyWithoutStationInput = {
    create?: XOR<Enumerable<RideCreateWithoutStationInput>, Enumerable<RideUncheckedCreateWithoutStationInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutStationInput>
    createMany?: RideCreateManyStationInputEnvelope
    connect?: Enumerable<RideWhereUniqueInput>
  }

  export type TrainLineCreateNestedManyWithoutStationsInput = {
    create?: XOR<Enumerable<TrainLineCreateWithoutStationsInput>, Enumerable<TrainLineUncheckedCreateWithoutStationsInput>>
    connectOrCreate?: Enumerable<TrainLineCreateOrConnectWithoutStationsInput>
    connect?: Enumerable<TrainLineWhereUniqueInput>
  }

  export type RideUncheckedCreateNestedManyWithoutEnterStationInput = {
    create?: XOR<Enumerable<RideCreateWithoutEnterStationInput>, Enumerable<RideUncheckedCreateWithoutEnterStationInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutEnterStationInput>
    createMany?: RideCreateManyEnterStationInputEnvelope
    connect?: Enumerable<RideWhereUniqueInput>
  }

  export type RideUncheckedCreateNestedManyWithoutExitStationInput = {
    create?: XOR<Enumerable<RideCreateWithoutExitStationInput>, Enumerable<RideUncheckedCreateWithoutExitStationInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutExitStationInput>
    createMany?: RideCreateManyExitStationInputEnvelope
    connect?: Enumerable<RideWhereUniqueInput>
  }

  export type RideUncheckedCreateNestedManyWithoutStationInput = {
    create?: XOR<Enumerable<RideCreateWithoutStationInput>, Enumerable<RideUncheckedCreateWithoutStationInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutStationInput>
    createMany?: RideCreateManyStationInputEnvelope
    connect?: Enumerable<RideWhereUniqueInput>
  }

  export type TrainLineUncheckedCreateNestedManyWithoutStationsInput = {
    create?: XOR<Enumerable<TrainLineCreateWithoutStationsInput>, Enumerable<TrainLineUncheckedCreateWithoutStationsInput>>
    connectOrCreate?: Enumerable<TrainLineCreateOrConnectWithoutStationsInput>
    connect?: Enumerable<TrainLineWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type RideUpdateManyWithoutEnterStationNestedInput = {
    create?: XOR<Enumerable<RideCreateWithoutEnterStationInput>, Enumerable<RideUncheckedCreateWithoutEnterStationInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutEnterStationInput>
    upsert?: Enumerable<RideUpsertWithWhereUniqueWithoutEnterStationInput>
    createMany?: RideCreateManyEnterStationInputEnvelope
    set?: Enumerable<RideWhereUniqueInput>
    disconnect?: Enumerable<RideWhereUniqueInput>
    delete?: Enumerable<RideWhereUniqueInput>
    connect?: Enumerable<RideWhereUniqueInput>
    update?: Enumerable<RideUpdateWithWhereUniqueWithoutEnterStationInput>
    updateMany?: Enumerable<RideUpdateManyWithWhereWithoutEnterStationInput>
    deleteMany?: Enumerable<RideScalarWhereInput>
  }

  export type RideUpdateManyWithoutExitStationNestedInput = {
    create?: XOR<Enumerable<RideCreateWithoutExitStationInput>, Enumerable<RideUncheckedCreateWithoutExitStationInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutExitStationInput>
    upsert?: Enumerable<RideUpsertWithWhereUniqueWithoutExitStationInput>
    createMany?: RideCreateManyExitStationInputEnvelope
    set?: Enumerable<RideWhereUniqueInput>
    disconnect?: Enumerable<RideWhereUniqueInput>
    delete?: Enumerable<RideWhereUniqueInput>
    connect?: Enumerable<RideWhereUniqueInput>
    update?: Enumerable<RideUpdateWithWhereUniqueWithoutExitStationInput>
    updateMany?: Enumerable<RideUpdateManyWithWhereWithoutExitStationInput>
    deleteMany?: Enumerable<RideScalarWhereInput>
  }

  export type RideUpdateManyWithoutStationNestedInput = {
    create?: XOR<Enumerable<RideCreateWithoutStationInput>, Enumerable<RideUncheckedCreateWithoutStationInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutStationInput>
    upsert?: Enumerable<RideUpsertWithWhereUniqueWithoutStationInput>
    createMany?: RideCreateManyStationInputEnvelope
    set?: Enumerable<RideWhereUniqueInput>
    disconnect?: Enumerable<RideWhereUniqueInput>
    delete?: Enumerable<RideWhereUniqueInput>
    connect?: Enumerable<RideWhereUniqueInput>
    update?: Enumerable<RideUpdateWithWhereUniqueWithoutStationInput>
    updateMany?: Enumerable<RideUpdateManyWithWhereWithoutStationInput>
    deleteMany?: Enumerable<RideScalarWhereInput>
  }

  export type TrainLineUpdateManyWithoutStationsNestedInput = {
    create?: XOR<Enumerable<TrainLineCreateWithoutStationsInput>, Enumerable<TrainLineUncheckedCreateWithoutStationsInput>>
    connectOrCreate?: Enumerable<TrainLineCreateOrConnectWithoutStationsInput>
    upsert?: Enumerable<TrainLineUpsertWithWhereUniqueWithoutStationsInput>
    set?: Enumerable<TrainLineWhereUniqueInput>
    disconnect?: Enumerable<TrainLineWhereUniqueInput>
    delete?: Enumerable<TrainLineWhereUniqueInput>
    connect?: Enumerable<TrainLineWhereUniqueInput>
    update?: Enumerable<TrainLineUpdateWithWhereUniqueWithoutStationsInput>
    updateMany?: Enumerable<TrainLineUpdateManyWithWhereWithoutStationsInput>
    deleteMany?: Enumerable<TrainLineScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RideUncheckedUpdateManyWithoutEnterStationNestedInput = {
    create?: XOR<Enumerable<RideCreateWithoutEnterStationInput>, Enumerable<RideUncheckedCreateWithoutEnterStationInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutEnterStationInput>
    upsert?: Enumerable<RideUpsertWithWhereUniqueWithoutEnterStationInput>
    createMany?: RideCreateManyEnterStationInputEnvelope
    set?: Enumerable<RideWhereUniqueInput>
    disconnect?: Enumerable<RideWhereUniqueInput>
    delete?: Enumerable<RideWhereUniqueInput>
    connect?: Enumerable<RideWhereUniqueInput>
    update?: Enumerable<RideUpdateWithWhereUniqueWithoutEnterStationInput>
    updateMany?: Enumerable<RideUpdateManyWithWhereWithoutEnterStationInput>
    deleteMany?: Enumerable<RideScalarWhereInput>
  }

  export type RideUncheckedUpdateManyWithoutExitStationNestedInput = {
    create?: XOR<Enumerable<RideCreateWithoutExitStationInput>, Enumerable<RideUncheckedCreateWithoutExitStationInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutExitStationInput>
    upsert?: Enumerable<RideUpsertWithWhereUniqueWithoutExitStationInput>
    createMany?: RideCreateManyExitStationInputEnvelope
    set?: Enumerable<RideWhereUniqueInput>
    disconnect?: Enumerable<RideWhereUniqueInput>
    delete?: Enumerable<RideWhereUniqueInput>
    connect?: Enumerable<RideWhereUniqueInput>
    update?: Enumerable<RideUpdateWithWhereUniqueWithoutExitStationInput>
    updateMany?: Enumerable<RideUpdateManyWithWhereWithoutExitStationInput>
    deleteMany?: Enumerable<RideScalarWhereInput>
  }

  export type RideUncheckedUpdateManyWithoutStationNestedInput = {
    create?: XOR<Enumerable<RideCreateWithoutStationInput>, Enumerable<RideUncheckedCreateWithoutStationInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutStationInput>
    upsert?: Enumerable<RideUpsertWithWhereUniqueWithoutStationInput>
    createMany?: RideCreateManyStationInputEnvelope
    set?: Enumerable<RideWhereUniqueInput>
    disconnect?: Enumerable<RideWhereUniqueInput>
    delete?: Enumerable<RideWhereUniqueInput>
    connect?: Enumerable<RideWhereUniqueInput>
    update?: Enumerable<RideUpdateWithWhereUniqueWithoutStationInput>
    updateMany?: Enumerable<RideUpdateManyWithWhereWithoutStationInput>
    deleteMany?: Enumerable<RideScalarWhereInput>
  }

  export type TrainLineUncheckedUpdateManyWithoutStationsNestedInput = {
    create?: XOR<Enumerable<TrainLineCreateWithoutStationsInput>, Enumerable<TrainLineUncheckedCreateWithoutStationsInput>>
    connectOrCreate?: Enumerable<TrainLineCreateOrConnectWithoutStationsInput>
    upsert?: Enumerable<TrainLineUpsertWithWhereUniqueWithoutStationsInput>
    set?: Enumerable<TrainLineWhereUniqueInput>
    disconnect?: Enumerable<TrainLineWhereUniqueInput>
    delete?: Enumerable<TrainLineWhereUniqueInput>
    connect?: Enumerable<TrainLineWhereUniqueInput>
    update?: Enumerable<TrainLineUpdateWithWhereUniqueWithoutStationsInput>
    updateMany?: Enumerable<TrainLineUpdateManyWithWhereWithoutStationsInput>
    deleteMany?: Enumerable<TrainLineScalarWhereInput>
  }

  export type TrainLineCreateNestedOneWithoutTrainInput = {
    create?: XOR<TrainLineCreateWithoutTrainInput, TrainLineUncheckedCreateWithoutTrainInput>
    connectOrCreate?: TrainLineCreateOrConnectWithoutTrainInput
    connect?: TrainLineWhereUniqueInput
  }

  export type TrainLineUncheckedCreateNestedOneWithoutTrainInput = {
    create?: XOR<TrainLineCreateWithoutTrainInput, TrainLineUncheckedCreateWithoutTrainInput>
    connectOrCreate?: TrainLineCreateOrConnectWithoutTrainInput
    connect?: TrainLineWhereUniqueInput
  }

  export type TrainLineUpdateOneWithoutTrainNestedInput = {
    create?: XOR<TrainLineCreateWithoutTrainInput, TrainLineUncheckedCreateWithoutTrainInput>
    connectOrCreate?: TrainLineCreateOrConnectWithoutTrainInput
    upsert?: TrainLineUpsertWithoutTrainInput
    disconnect?: boolean
    delete?: boolean
    connect?: TrainLineWhereUniqueInput
    update?: XOR<TrainLineUpdateWithoutTrainInput, TrainLineUncheckedUpdateWithoutTrainInput>
  }

  export type TrainLineUncheckedUpdateOneWithoutTrainNestedInput = {
    create?: XOR<TrainLineCreateWithoutTrainInput, TrainLineUncheckedCreateWithoutTrainInput>
    connectOrCreate?: TrainLineCreateOrConnectWithoutTrainInput
    upsert?: TrainLineUpsertWithoutTrainInput
    disconnect?: boolean
    delete?: boolean
    connect?: TrainLineWhereUniqueInput
    update?: XOR<TrainLineUpdateWithoutTrainInput, TrainLineUncheckedUpdateWithoutTrainInput>
  }

  export type TrainCreateNestedOneWithoutTrainLineInput = {
    create?: XOR<TrainCreateWithoutTrainLineInput, TrainUncheckedCreateWithoutTrainLineInput>
    connectOrCreate?: TrainCreateOrConnectWithoutTrainLineInput
    connect?: TrainWhereUniqueInput
  }

  export type StationCreateNestedManyWithoutTrainLineInput = {
    create?: XOR<Enumerable<StationCreateWithoutTrainLineInput>, Enumerable<StationUncheckedCreateWithoutTrainLineInput>>
    connectOrCreate?: Enumerable<StationCreateOrConnectWithoutTrainLineInput>
    connect?: Enumerable<StationWhereUniqueInput>
  }

  export type StationUncheckedCreateNestedManyWithoutTrainLineInput = {
    create?: XOR<Enumerable<StationCreateWithoutTrainLineInput>, Enumerable<StationUncheckedCreateWithoutTrainLineInput>>
    connectOrCreate?: Enumerable<StationCreateOrConnectWithoutTrainLineInput>
    connect?: Enumerable<StationWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TrainUpdateOneRequiredWithoutTrainLineNestedInput = {
    create?: XOR<TrainCreateWithoutTrainLineInput, TrainUncheckedCreateWithoutTrainLineInput>
    connectOrCreate?: TrainCreateOrConnectWithoutTrainLineInput
    upsert?: TrainUpsertWithoutTrainLineInput
    connect?: TrainWhereUniqueInput
    update?: XOR<TrainUpdateWithoutTrainLineInput, TrainUncheckedUpdateWithoutTrainLineInput>
  }

  export type StationUpdateManyWithoutTrainLineNestedInput = {
    create?: XOR<Enumerable<StationCreateWithoutTrainLineInput>, Enumerable<StationUncheckedCreateWithoutTrainLineInput>>
    connectOrCreate?: Enumerable<StationCreateOrConnectWithoutTrainLineInput>
    upsert?: Enumerable<StationUpsertWithWhereUniqueWithoutTrainLineInput>
    set?: Enumerable<StationWhereUniqueInput>
    disconnect?: Enumerable<StationWhereUniqueInput>
    delete?: Enumerable<StationWhereUniqueInput>
    connect?: Enumerable<StationWhereUniqueInput>
    update?: Enumerable<StationUpdateWithWhereUniqueWithoutTrainLineInput>
    updateMany?: Enumerable<StationUpdateManyWithWhereWithoutTrainLineInput>
    deleteMany?: Enumerable<StationScalarWhereInput>
  }

  export type StationUncheckedUpdateManyWithoutTrainLineNestedInput = {
    create?: XOR<Enumerable<StationCreateWithoutTrainLineInput>, Enumerable<StationUncheckedCreateWithoutTrainLineInput>>
    connectOrCreate?: Enumerable<StationCreateOrConnectWithoutTrainLineInput>
    upsert?: Enumerable<StationUpsertWithWhereUniqueWithoutTrainLineInput>
    set?: Enumerable<StationWhereUniqueInput>
    disconnect?: Enumerable<StationWhereUniqueInput>
    delete?: Enumerable<StationWhereUniqueInput>
    connect?: Enumerable<StationWhereUniqueInput>
    update?: Enumerable<StationUpdateWithWhereUniqueWithoutTrainLineInput>
    updateMany?: Enumerable<StationUpdateManyWithWhereWithoutTrainLineInput>
    deleteMany?: Enumerable<StationScalarWhereInput>
  }

  export type RideCreateNestedManyWithoutCardInput = {
    create?: XOR<Enumerable<RideCreateWithoutCardInput>, Enumerable<RideUncheckedCreateWithoutCardInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutCardInput>
    createMany?: RideCreateManyCardInputEnvelope
    connect?: Enumerable<RideWhereUniqueInput>
  }

  export type RideUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<Enumerable<RideCreateWithoutCardInput>, Enumerable<RideUncheckedCreateWithoutCardInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutCardInput>
    createMany?: RideCreateManyCardInputEnvelope
    connect?: Enumerable<RideWhereUniqueInput>
  }

  export type RideUpdateManyWithoutCardNestedInput = {
    create?: XOR<Enumerable<RideCreateWithoutCardInput>, Enumerable<RideUncheckedCreateWithoutCardInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutCardInput>
    upsert?: Enumerable<RideUpsertWithWhereUniqueWithoutCardInput>
    createMany?: RideCreateManyCardInputEnvelope
    set?: Enumerable<RideWhereUniqueInput>
    disconnect?: Enumerable<RideWhereUniqueInput>
    delete?: Enumerable<RideWhereUniqueInput>
    connect?: Enumerable<RideWhereUniqueInput>
    update?: Enumerable<RideUpdateWithWhereUniqueWithoutCardInput>
    updateMany?: Enumerable<RideUpdateManyWithWhereWithoutCardInput>
    deleteMany?: Enumerable<RideScalarWhereInput>
  }

  export type RideUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<Enumerable<RideCreateWithoutCardInput>, Enumerable<RideUncheckedCreateWithoutCardInput>>
    connectOrCreate?: Enumerable<RideCreateOrConnectWithoutCardInput>
    upsert?: Enumerable<RideUpsertWithWhereUniqueWithoutCardInput>
    createMany?: RideCreateManyCardInputEnvelope
    set?: Enumerable<RideWhereUniqueInput>
    disconnect?: Enumerable<RideWhereUniqueInput>
    delete?: Enumerable<RideWhereUniqueInput>
    connect?: Enumerable<RideWhereUniqueInput>
    update?: Enumerable<RideUpdateWithWhereUniqueWithoutCardInput>
    updateMany?: Enumerable<RideUpdateManyWithWhereWithoutCardInput>
    deleteMany?: Enumerable<RideScalarWhereInput>
  }

  export type CardCreateNestedOneWithoutRideInput = {
    create?: XOR<CardCreateWithoutRideInput, CardUncheckedCreateWithoutRideInput>
    connectOrCreate?: CardCreateOrConnectWithoutRideInput
    connect?: CardWhereUniqueInput
  }

  export type StationCreateNestedOneWithoutEnterStationInput = {
    create?: XOR<StationCreateWithoutEnterStationInput, StationUncheckedCreateWithoutEnterStationInput>
    connectOrCreate?: StationCreateOrConnectWithoutEnterStationInput
    connect?: StationWhereUniqueInput
  }

  export type StationCreateNestedOneWithoutExitStationInput = {
    create?: XOR<StationCreateWithoutExitStationInput, StationUncheckedCreateWithoutExitStationInput>
    connectOrCreate?: StationCreateOrConnectWithoutExitStationInput
    connect?: StationWhereUniqueInput
  }

  export type StationCreateNestedOneWithoutRideInput = {
    create?: XOR<StationCreateWithoutRideInput, StationUncheckedCreateWithoutRideInput>
    connectOrCreate?: StationCreateOrConnectWithoutRideInput
    connect?: StationWhereUniqueInput
  }

  export type CardUpdateOneRequiredWithoutRideNestedInput = {
    create?: XOR<CardCreateWithoutRideInput, CardUncheckedCreateWithoutRideInput>
    connectOrCreate?: CardCreateOrConnectWithoutRideInput
    upsert?: CardUpsertWithoutRideInput
    connect?: CardWhereUniqueInput
    update?: XOR<CardUpdateWithoutRideInput, CardUncheckedUpdateWithoutRideInput>
  }

  export type StationUpdateOneRequiredWithoutEnterStationNestedInput = {
    create?: XOR<StationCreateWithoutEnterStationInput, StationUncheckedCreateWithoutEnterStationInput>
    connectOrCreate?: StationCreateOrConnectWithoutEnterStationInput
    upsert?: StationUpsertWithoutEnterStationInput
    connect?: StationWhereUniqueInput
    update?: XOR<StationUpdateWithoutEnterStationInput, StationUncheckedUpdateWithoutEnterStationInput>
  }

  export type StationUpdateOneWithoutExitStationNestedInput = {
    create?: XOR<StationCreateWithoutExitStationInput, StationUncheckedCreateWithoutExitStationInput>
    connectOrCreate?: StationCreateOrConnectWithoutExitStationInput
    upsert?: StationUpsertWithoutExitStationInput
    disconnect?: boolean
    delete?: boolean
    connect?: StationWhereUniqueInput
    update?: XOR<StationUpdateWithoutExitStationInput, StationUncheckedUpdateWithoutExitStationInput>
  }

  export type StationUpdateOneWithoutRideNestedInput = {
    create?: XOR<StationCreateWithoutRideInput, StationUncheckedCreateWithoutRideInput>
    connectOrCreate?: StationCreateOrConnectWithoutRideInput
    upsert?: StationUpsertWithoutRideInput
    disconnect?: boolean
    delete?: boolean
    connect?: StationWhereUniqueInput
    update?: XOR<StationUpdateWithoutRideInput, StationUncheckedUpdateWithoutRideInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type RideCreateWithoutEnterStationInput = {
    fare: number
    card: CardCreateNestedOneWithoutRideInput
    exitStation?: StationCreateNestedOneWithoutExitStationInput
    Station?: StationCreateNestedOneWithoutRideInput
  }

  export type RideUncheckedCreateWithoutEnterStationInput = {
    id?: number
    cardId: number
    exitStationId?: number | null
    stationId?: number | null
    fare: number
  }

  export type RideCreateOrConnectWithoutEnterStationInput = {
    where: RideWhereUniqueInput
    create: XOR<RideCreateWithoutEnterStationInput, RideUncheckedCreateWithoutEnterStationInput>
  }

  export type RideCreateManyEnterStationInputEnvelope = {
    data: Enumerable<RideCreateManyEnterStationInput>
    skipDuplicates?: boolean
  }

  export type RideCreateWithoutExitStationInput = {
    fare: number
    card: CardCreateNestedOneWithoutRideInput
    enterStation: StationCreateNestedOneWithoutEnterStationInput
    Station?: StationCreateNestedOneWithoutRideInput
  }

  export type RideUncheckedCreateWithoutExitStationInput = {
    id?: number
    cardId: number
    enterStationId: number
    stationId?: number | null
    fare: number
  }

  export type RideCreateOrConnectWithoutExitStationInput = {
    where: RideWhereUniqueInput
    create: XOR<RideCreateWithoutExitStationInput, RideUncheckedCreateWithoutExitStationInput>
  }

  export type RideCreateManyExitStationInputEnvelope = {
    data: Enumerable<RideCreateManyExitStationInput>
    skipDuplicates?: boolean
  }

  export type RideCreateWithoutStationInput = {
    fare: number
    card: CardCreateNestedOneWithoutRideInput
    enterStation: StationCreateNestedOneWithoutEnterStationInput
    exitStation?: StationCreateNestedOneWithoutExitStationInput
  }

  export type RideUncheckedCreateWithoutStationInput = {
    id?: number
    cardId: number
    enterStationId: number
    exitStationId?: number | null
    fare: number
  }

  export type RideCreateOrConnectWithoutStationInput = {
    where: RideWhereUniqueInput
    create: XOR<RideCreateWithoutStationInput, RideUncheckedCreateWithoutStationInput>
  }

  export type RideCreateManyStationInputEnvelope = {
    data: Enumerable<RideCreateManyStationInput>
    skipDuplicates?: boolean
  }

  export type TrainLineCreateWithoutStationsInput = {
    fare?: number
    train: TrainCreateNestedOneWithoutTrainLineInput
  }

  export type TrainLineUncheckedCreateWithoutStationsInput = {
    id?: number
    trainId: number
    fare?: number
  }

  export type TrainLineCreateOrConnectWithoutStationsInput = {
    where: TrainLineWhereUniqueInput
    create: XOR<TrainLineCreateWithoutStationsInput, TrainLineUncheckedCreateWithoutStationsInput>
  }

  export type RideUpsertWithWhereUniqueWithoutEnterStationInput = {
    where: RideWhereUniqueInput
    update: XOR<RideUpdateWithoutEnterStationInput, RideUncheckedUpdateWithoutEnterStationInput>
    create: XOR<RideCreateWithoutEnterStationInput, RideUncheckedCreateWithoutEnterStationInput>
  }

  export type RideUpdateWithWhereUniqueWithoutEnterStationInput = {
    where: RideWhereUniqueInput
    data: XOR<RideUpdateWithoutEnterStationInput, RideUncheckedUpdateWithoutEnterStationInput>
  }

  export type RideUpdateManyWithWhereWithoutEnterStationInput = {
    where: RideScalarWhereInput
    data: XOR<RideUpdateManyMutationInput, RideUncheckedUpdateManyWithoutEnterStationInput>
  }

  export type RideScalarWhereInput = {
    AND?: Enumerable<RideScalarWhereInput>
    OR?: Enumerable<RideScalarWhereInput>
    NOT?: Enumerable<RideScalarWhereInput>
    id?: IntFilter | number
    cardId?: IntFilter | number
    enterStationId?: IntFilter | number
    exitStationId?: IntNullableFilter | number | null
    stationId?: IntNullableFilter | number | null
    fare?: FloatFilter | number
  }

  export type RideUpsertWithWhereUniqueWithoutExitStationInput = {
    where: RideWhereUniqueInput
    update: XOR<RideUpdateWithoutExitStationInput, RideUncheckedUpdateWithoutExitStationInput>
    create: XOR<RideCreateWithoutExitStationInput, RideUncheckedCreateWithoutExitStationInput>
  }

  export type RideUpdateWithWhereUniqueWithoutExitStationInput = {
    where: RideWhereUniqueInput
    data: XOR<RideUpdateWithoutExitStationInput, RideUncheckedUpdateWithoutExitStationInput>
  }

  export type RideUpdateManyWithWhereWithoutExitStationInput = {
    where: RideScalarWhereInput
    data: XOR<RideUpdateManyMutationInput, RideUncheckedUpdateManyWithoutExitStationInput>
  }

  export type RideUpsertWithWhereUniqueWithoutStationInput = {
    where: RideWhereUniqueInput
    update: XOR<RideUpdateWithoutStationInput, RideUncheckedUpdateWithoutStationInput>
    create: XOR<RideCreateWithoutStationInput, RideUncheckedCreateWithoutStationInput>
  }

  export type RideUpdateWithWhereUniqueWithoutStationInput = {
    where: RideWhereUniqueInput
    data: XOR<RideUpdateWithoutStationInput, RideUncheckedUpdateWithoutStationInput>
  }

  export type RideUpdateManyWithWhereWithoutStationInput = {
    where: RideScalarWhereInput
    data: XOR<RideUpdateManyMutationInput, RideUncheckedUpdateManyWithoutRideInput>
  }

  export type TrainLineUpsertWithWhereUniqueWithoutStationsInput = {
    where: TrainLineWhereUniqueInput
    update: XOR<TrainLineUpdateWithoutStationsInput, TrainLineUncheckedUpdateWithoutStationsInput>
    create: XOR<TrainLineCreateWithoutStationsInput, TrainLineUncheckedCreateWithoutStationsInput>
  }

  export type TrainLineUpdateWithWhereUniqueWithoutStationsInput = {
    where: TrainLineWhereUniqueInput
    data: XOR<TrainLineUpdateWithoutStationsInput, TrainLineUncheckedUpdateWithoutStationsInput>
  }

  export type TrainLineUpdateManyWithWhereWithoutStationsInput = {
    where: TrainLineScalarWhereInput
    data: XOR<TrainLineUpdateManyMutationInput, TrainLineUncheckedUpdateManyWithoutTrainLineInput>
  }

  export type TrainLineScalarWhereInput = {
    AND?: Enumerable<TrainLineScalarWhereInput>
    OR?: Enumerable<TrainLineScalarWhereInput>
    NOT?: Enumerable<TrainLineScalarWhereInput>
    id?: IntFilter | number
    trainId?: IntFilter | number
    fare?: FloatFilter | number
  }

  export type TrainLineCreateWithoutTrainInput = {
    fare?: number
    stations?: StationCreateNestedManyWithoutTrainLineInput
  }

  export type TrainLineUncheckedCreateWithoutTrainInput = {
    id?: number
    fare?: number
    stations?: StationUncheckedCreateNestedManyWithoutTrainLineInput
  }

  export type TrainLineCreateOrConnectWithoutTrainInput = {
    where: TrainLineWhereUniqueInput
    create: XOR<TrainLineCreateWithoutTrainInput, TrainLineUncheckedCreateWithoutTrainInput>
  }

  export type TrainLineUpsertWithoutTrainInput = {
    update: XOR<TrainLineUpdateWithoutTrainInput, TrainLineUncheckedUpdateWithoutTrainInput>
    create: XOR<TrainLineCreateWithoutTrainInput, TrainLineUncheckedCreateWithoutTrainInput>
  }

  export type TrainLineUpdateWithoutTrainInput = {
    fare?: FloatFieldUpdateOperationsInput | number
    stations?: StationUpdateManyWithoutTrainLineNestedInput
  }

  export type TrainLineUncheckedUpdateWithoutTrainInput = {
    id?: IntFieldUpdateOperationsInput | number
    fare?: FloatFieldUpdateOperationsInput | number
    stations?: StationUncheckedUpdateManyWithoutTrainLineNestedInput
  }

  export type TrainCreateWithoutTrainLineInput = {
    name: string
  }

  export type TrainUncheckedCreateWithoutTrainLineInput = {
    id?: number
    name: string
  }

  export type TrainCreateOrConnectWithoutTrainLineInput = {
    where: TrainWhereUniqueInput
    create: XOR<TrainCreateWithoutTrainLineInput, TrainUncheckedCreateWithoutTrainLineInput>
  }

  export type StationCreateWithoutTrainLineInput = {
    name: string
    EnterStation?: RideCreateNestedManyWithoutEnterStationInput
    ExitStation?: RideCreateNestedManyWithoutExitStationInput
    Ride?: RideCreateNestedManyWithoutStationInput
  }

  export type StationUncheckedCreateWithoutTrainLineInput = {
    id?: number
    name: string
    EnterStation?: RideUncheckedCreateNestedManyWithoutEnterStationInput
    ExitStation?: RideUncheckedCreateNestedManyWithoutExitStationInput
    Ride?: RideUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationCreateOrConnectWithoutTrainLineInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutTrainLineInput, StationUncheckedCreateWithoutTrainLineInput>
  }

  export type TrainUpsertWithoutTrainLineInput = {
    update: XOR<TrainUpdateWithoutTrainLineInput, TrainUncheckedUpdateWithoutTrainLineInput>
    create: XOR<TrainCreateWithoutTrainLineInput, TrainUncheckedCreateWithoutTrainLineInput>
  }

  export type TrainUpdateWithoutTrainLineInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TrainUncheckedUpdateWithoutTrainLineInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StationUpsertWithWhereUniqueWithoutTrainLineInput = {
    where: StationWhereUniqueInput
    update: XOR<StationUpdateWithoutTrainLineInput, StationUncheckedUpdateWithoutTrainLineInput>
    create: XOR<StationCreateWithoutTrainLineInput, StationUncheckedCreateWithoutTrainLineInput>
  }

  export type StationUpdateWithWhereUniqueWithoutTrainLineInput = {
    where: StationWhereUniqueInput
    data: XOR<StationUpdateWithoutTrainLineInput, StationUncheckedUpdateWithoutTrainLineInput>
  }

  export type StationUpdateManyWithWhereWithoutTrainLineInput = {
    where: StationScalarWhereInput
    data: XOR<StationUpdateManyMutationInput, StationUncheckedUpdateManyWithoutStationsInput>
  }

  export type StationScalarWhereInput = {
    AND?: Enumerable<StationScalarWhereInput>
    OR?: Enumerable<StationScalarWhereInput>
    NOT?: Enumerable<StationScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
  }

  export type RideCreateWithoutCardInput = {
    fare: number
    enterStation: StationCreateNestedOneWithoutEnterStationInput
    exitStation?: StationCreateNestedOneWithoutExitStationInput
    Station?: StationCreateNestedOneWithoutRideInput
  }

  export type RideUncheckedCreateWithoutCardInput = {
    id?: number
    enterStationId: number
    exitStationId?: number | null
    stationId?: number | null
    fare: number
  }

  export type RideCreateOrConnectWithoutCardInput = {
    where: RideWhereUniqueInput
    create: XOR<RideCreateWithoutCardInput, RideUncheckedCreateWithoutCardInput>
  }

  export type RideCreateManyCardInputEnvelope = {
    data: Enumerable<RideCreateManyCardInput>
    skipDuplicates?: boolean
  }

  export type RideUpsertWithWhereUniqueWithoutCardInput = {
    where: RideWhereUniqueInput
    update: XOR<RideUpdateWithoutCardInput, RideUncheckedUpdateWithoutCardInput>
    create: XOR<RideCreateWithoutCardInput, RideUncheckedCreateWithoutCardInput>
  }

  export type RideUpdateWithWhereUniqueWithoutCardInput = {
    where: RideWhereUniqueInput
    data: XOR<RideUpdateWithoutCardInput, RideUncheckedUpdateWithoutCardInput>
  }

  export type RideUpdateManyWithWhereWithoutCardInput = {
    where: RideScalarWhereInput
    data: XOR<RideUpdateManyMutationInput, RideUncheckedUpdateManyWithoutRideInput>
  }

  export type CardCreateWithoutRideInput = {
    number: string
    amount?: number
  }

  export type CardUncheckedCreateWithoutRideInput = {
    id?: number
    number: string
    amount?: number
  }

  export type CardCreateOrConnectWithoutRideInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutRideInput, CardUncheckedCreateWithoutRideInput>
  }

  export type StationCreateWithoutEnterStationInput = {
    name: string
    ExitStation?: RideCreateNestedManyWithoutExitStationInput
    Ride?: RideCreateNestedManyWithoutStationInput
    TrainLine?: TrainLineCreateNestedManyWithoutStationsInput
  }

  export type StationUncheckedCreateWithoutEnterStationInput = {
    id?: number
    name: string
    ExitStation?: RideUncheckedCreateNestedManyWithoutExitStationInput
    Ride?: RideUncheckedCreateNestedManyWithoutStationInput
    TrainLine?: TrainLineUncheckedCreateNestedManyWithoutStationsInput
  }

  export type StationCreateOrConnectWithoutEnterStationInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutEnterStationInput, StationUncheckedCreateWithoutEnterStationInput>
  }

  export type StationCreateWithoutExitStationInput = {
    name: string
    EnterStation?: RideCreateNestedManyWithoutEnterStationInput
    Ride?: RideCreateNestedManyWithoutStationInput
    TrainLine?: TrainLineCreateNestedManyWithoutStationsInput
  }

  export type StationUncheckedCreateWithoutExitStationInput = {
    id?: number
    name: string
    EnterStation?: RideUncheckedCreateNestedManyWithoutEnterStationInput
    Ride?: RideUncheckedCreateNestedManyWithoutStationInput
    TrainLine?: TrainLineUncheckedCreateNestedManyWithoutStationsInput
  }

  export type StationCreateOrConnectWithoutExitStationInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutExitStationInput, StationUncheckedCreateWithoutExitStationInput>
  }

  export type StationCreateWithoutRideInput = {
    name: string
    EnterStation?: RideCreateNestedManyWithoutEnterStationInput
    ExitStation?: RideCreateNestedManyWithoutExitStationInput
    TrainLine?: TrainLineCreateNestedManyWithoutStationsInput
  }

  export type StationUncheckedCreateWithoutRideInput = {
    id?: number
    name: string
    EnterStation?: RideUncheckedCreateNestedManyWithoutEnterStationInput
    ExitStation?: RideUncheckedCreateNestedManyWithoutExitStationInput
    TrainLine?: TrainLineUncheckedCreateNestedManyWithoutStationsInput
  }

  export type StationCreateOrConnectWithoutRideInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutRideInput, StationUncheckedCreateWithoutRideInput>
  }

  export type CardUpsertWithoutRideInput = {
    update: XOR<CardUpdateWithoutRideInput, CardUncheckedUpdateWithoutRideInput>
    create: XOR<CardCreateWithoutRideInput, CardUncheckedCreateWithoutRideInput>
  }

  export type CardUpdateWithoutRideInput = {
    number?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
  }

  export type CardUncheckedUpdateWithoutRideInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
  }

  export type StationUpsertWithoutEnterStationInput = {
    update: XOR<StationUpdateWithoutEnterStationInput, StationUncheckedUpdateWithoutEnterStationInput>
    create: XOR<StationCreateWithoutEnterStationInput, StationUncheckedCreateWithoutEnterStationInput>
  }

  export type StationUpdateWithoutEnterStationInput = {
    name?: StringFieldUpdateOperationsInput | string
    ExitStation?: RideUpdateManyWithoutExitStationNestedInput
    Ride?: RideUpdateManyWithoutStationNestedInput
    TrainLine?: TrainLineUpdateManyWithoutStationsNestedInput
  }

  export type StationUncheckedUpdateWithoutEnterStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ExitStation?: RideUncheckedUpdateManyWithoutExitStationNestedInput
    Ride?: RideUncheckedUpdateManyWithoutStationNestedInput
    TrainLine?: TrainLineUncheckedUpdateManyWithoutStationsNestedInput
  }

  export type StationUpsertWithoutExitStationInput = {
    update: XOR<StationUpdateWithoutExitStationInput, StationUncheckedUpdateWithoutExitStationInput>
    create: XOR<StationCreateWithoutExitStationInput, StationUncheckedCreateWithoutExitStationInput>
  }

  export type StationUpdateWithoutExitStationInput = {
    name?: StringFieldUpdateOperationsInput | string
    EnterStation?: RideUpdateManyWithoutEnterStationNestedInput
    Ride?: RideUpdateManyWithoutStationNestedInput
    TrainLine?: TrainLineUpdateManyWithoutStationsNestedInput
  }

  export type StationUncheckedUpdateWithoutExitStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    EnterStation?: RideUncheckedUpdateManyWithoutEnterStationNestedInput
    Ride?: RideUncheckedUpdateManyWithoutStationNestedInput
    TrainLine?: TrainLineUncheckedUpdateManyWithoutStationsNestedInput
  }

  export type StationUpsertWithoutRideInput = {
    update: XOR<StationUpdateWithoutRideInput, StationUncheckedUpdateWithoutRideInput>
    create: XOR<StationCreateWithoutRideInput, StationUncheckedCreateWithoutRideInput>
  }

  export type StationUpdateWithoutRideInput = {
    name?: StringFieldUpdateOperationsInput | string
    EnterStation?: RideUpdateManyWithoutEnterStationNestedInput
    ExitStation?: RideUpdateManyWithoutExitStationNestedInput
    TrainLine?: TrainLineUpdateManyWithoutStationsNestedInput
  }

  export type StationUncheckedUpdateWithoutRideInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    EnterStation?: RideUncheckedUpdateManyWithoutEnterStationNestedInput
    ExitStation?: RideUncheckedUpdateManyWithoutExitStationNestedInput
    TrainLine?: TrainLineUncheckedUpdateManyWithoutStationsNestedInput
  }

  export type RideCreateManyEnterStationInput = {
    id?: number
    cardId: number
    exitStationId?: number | null
    stationId?: number | null
    fare: number
  }

  export type RideCreateManyExitStationInput = {
    id?: number
    cardId: number
    enterStationId: number
    stationId?: number | null
    fare: number
  }

  export type RideCreateManyStationInput = {
    id?: number
    cardId: number
    enterStationId: number
    exitStationId?: number | null
    fare: number
  }

  export type RideUpdateWithoutEnterStationInput = {
    fare?: FloatFieldUpdateOperationsInput | number
    card?: CardUpdateOneRequiredWithoutRideNestedInput
    exitStation?: StationUpdateOneWithoutExitStationNestedInput
    Station?: StationUpdateOneWithoutRideNestedInput
  }

  export type RideUncheckedUpdateWithoutEnterStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    cardId?: IntFieldUpdateOperationsInput | number
    exitStationId?: NullableIntFieldUpdateOperationsInput | number | null
    stationId?: NullableIntFieldUpdateOperationsInput | number | null
    fare?: FloatFieldUpdateOperationsInput | number
  }

  export type RideUncheckedUpdateManyWithoutEnterStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    cardId?: IntFieldUpdateOperationsInput | number
    exitStationId?: NullableIntFieldUpdateOperationsInput | number | null
    stationId?: NullableIntFieldUpdateOperationsInput | number | null
    fare?: FloatFieldUpdateOperationsInput | number
  }

  export type RideUpdateWithoutExitStationInput = {
    fare?: FloatFieldUpdateOperationsInput | number
    card?: CardUpdateOneRequiredWithoutRideNestedInput
    enterStation?: StationUpdateOneRequiredWithoutEnterStationNestedInput
    Station?: StationUpdateOneWithoutRideNestedInput
  }

  export type RideUncheckedUpdateWithoutExitStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    cardId?: IntFieldUpdateOperationsInput | number
    enterStationId?: IntFieldUpdateOperationsInput | number
    stationId?: NullableIntFieldUpdateOperationsInput | number | null
    fare?: FloatFieldUpdateOperationsInput | number
  }

  export type RideUncheckedUpdateManyWithoutExitStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    cardId?: IntFieldUpdateOperationsInput | number
    enterStationId?: IntFieldUpdateOperationsInput | number
    stationId?: NullableIntFieldUpdateOperationsInput | number | null
    fare?: FloatFieldUpdateOperationsInput | number
  }

  export type RideUpdateWithoutStationInput = {
    fare?: FloatFieldUpdateOperationsInput | number
    card?: CardUpdateOneRequiredWithoutRideNestedInput
    enterStation?: StationUpdateOneRequiredWithoutEnterStationNestedInput
    exitStation?: StationUpdateOneWithoutExitStationNestedInput
  }

  export type RideUncheckedUpdateWithoutStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    cardId?: IntFieldUpdateOperationsInput | number
    enterStationId?: IntFieldUpdateOperationsInput | number
    exitStationId?: NullableIntFieldUpdateOperationsInput | number | null
    fare?: FloatFieldUpdateOperationsInput | number
  }

  export type RideUncheckedUpdateManyWithoutRideInput = {
    id?: IntFieldUpdateOperationsInput | number
    cardId?: IntFieldUpdateOperationsInput | number
    enterStationId?: IntFieldUpdateOperationsInput | number
    exitStationId?: NullableIntFieldUpdateOperationsInput | number | null
    fare?: FloatFieldUpdateOperationsInput | number
  }

  export type TrainLineUpdateWithoutStationsInput = {
    fare?: FloatFieldUpdateOperationsInput | number
    train?: TrainUpdateOneRequiredWithoutTrainLineNestedInput
  }

  export type TrainLineUncheckedUpdateWithoutStationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainId?: IntFieldUpdateOperationsInput | number
    fare?: FloatFieldUpdateOperationsInput | number
  }

  export type TrainLineUncheckedUpdateManyWithoutTrainLineInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainId?: IntFieldUpdateOperationsInput | number
    fare?: FloatFieldUpdateOperationsInput | number
  }

  export type StationUpdateWithoutTrainLineInput = {
    name?: StringFieldUpdateOperationsInput | string
    EnterStation?: RideUpdateManyWithoutEnterStationNestedInput
    ExitStation?: RideUpdateManyWithoutExitStationNestedInput
    Ride?: RideUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateWithoutTrainLineInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    EnterStation?: RideUncheckedUpdateManyWithoutEnterStationNestedInput
    ExitStation?: RideUncheckedUpdateManyWithoutExitStationNestedInput
    Ride?: RideUncheckedUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateManyWithoutStationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RideCreateManyCardInput = {
    id?: number
    enterStationId: number
    exitStationId?: number | null
    stationId?: number | null
    fare: number
  }

  export type RideUpdateWithoutCardInput = {
    fare?: FloatFieldUpdateOperationsInput | number
    enterStation?: StationUpdateOneRequiredWithoutEnterStationNestedInput
    exitStation?: StationUpdateOneWithoutExitStationNestedInput
    Station?: StationUpdateOneWithoutRideNestedInput
  }

  export type RideUncheckedUpdateWithoutCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    enterStationId?: IntFieldUpdateOperationsInput | number
    exitStationId?: NullableIntFieldUpdateOperationsInput | number | null
    stationId?: NullableIntFieldUpdateOperationsInput | number | null
    fare?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}